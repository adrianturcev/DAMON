{
  "version": 3,
  "sources": ["node_modules/tslib/tslib.es6.mjs", "node_modules/clarinet/clarinet.js", "node_modules/json-in-order/src/index.ts", "node_modules/dompurify/src/utils.js", "node_modules/dompurify/src/tags.js", "node_modules/dompurify/src/attrs.js", "node_modules/dompurify/src/regexp.js", "node_modules/dompurify/src/purify.js", "src/Utils.js", "Damon.js", "main.js"],
  "sourcesContent": ["/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n", ";(function (clarinet) {\n  \"use strict\";\n\n  // non node-js needs to set clarinet debug on root\n  var env =(typeof process === 'object' && process.env)\n    ? process.env\n    : self;\n\n  clarinet.parser            = function (opt) { return new CParser(opt);};\n  clarinet.CParser           = CParser;\n  clarinet.CStream           = CStream;\n  clarinet.createStream      = createStream;\n  clarinet.MAX_BUFFER_LENGTH = 64 * 1024;\n  clarinet.DEBUG             = (env.CDEBUG==='debug');\n  clarinet.INFO              = (env.CDEBUG==='debug' || env.CDEBUG==='info');\n  clarinet.EVENTS            =\n    [ \"value\"\n    , \"string\"\n    , \"key\"\n    , \"openobject\"\n    , \"closeobject\"\n    , \"openarray\"\n    , \"closearray\"\n    , \"error\"\n    , \"end\"\n    , \"ready\"\n    ];\n\n  var buffers     = {\n        textNode: undefined,\n        numberNode: \"\"\n    }\n    , streamWraps = clarinet.EVENTS.filter(function (ev) {\n          return ev !== \"error\" && ev !== \"end\";\n        })\n    , S           = 0\n    , Stream\n    ;\n\n  clarinet.STATE =\n    { BEGIN                             : S++\n    , VALUE                             : S++ // general stuff\n    , OPEN_OBJECT                       : S++ // {\n    , CLOSE_OBJECT                      : S++ // }\n    , OPEN_ARRAY                        : S++ // [\n    , CLOSE_ARRAY                       : S++ // ]\n    , TEXT_ESCAPE                       : S++ // \\ stuff\n    , STRING                            : S++ // \"\"\n    , BACKSLASH                         : S++\n    , END                               : S++ // No more stack\n    , OPEN_KEY                          : S++ // , \"a\"\n    , CLOSE_KEY                         : S++ // :\n    , TRUE                              : S++ // r\n    , TRUE2                             : S++ // u\n    , TRUE3                             : S++ // e\n    , FALSE                             : S++ // a\n    , FALSE2                            : S++ // l\n    , FALSE3                            : S++ // s\n    , FALSE4                            : S++ // e\n    , NULL                              : S++ // u\n    , NULL2                             : S++ // l\n    , NULL3                             : S++ // l\n    , NUMBER_DECIMAL_POINT              : S++ // .\n    , NUMBER_DIGIT                      : S++ // [0-9]\n    };\n\n  for (var s_ in clarinet.STATE) clarinet.STATE[clarinet.STATE[s_]] = s_;\n\n  // switcharoo\n  S = clarinet.STATE;\n\n  const Char = {\n    tab                 : 0x09,     // \\t\n    lineFeed            : 0x0A,     // \\n\n    carriageReturn      : 0x0D,     // \\r\n    space               : 0x20,     // \" \"\n\n    doubleQuote         : 0x22,     // \"\n    plus                : 0x2B,     // +\n    comma               : 0x2C,     // ,\n    minus               : 0x2D,     // -\n    period              : 0x2E,     // .\n\n    _0                  : 0x30,     // 0\n    _9                  : 0x39,     // 9\n\n    colon               : 0x3A,     // :\n\n    E                   : 0x45,     // E\n\n    openBracket         : 0x5B,     // [\n    backslash           : 0x5C,     // \\\n    closeBracket        : 0x5D,     // ]\n\n    a                   : 0x61,     // a\n    b                   : 0x62,     // b\n    e                   : 0x65,     // e \n    f                   : 0x66,     // f\n    l                   : 0x6C,     // l\n    n                   : 0x6E,     // n\n    r                   : 0x72,     // r\n    s                   : 0x73,     // s\n    t                   : 0x74,     // t\n    u                   : 0x75,     // u\n\n    openBrace           : 0x7B,     // {\n    closeBrace          : 0x7D,     // }\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function f () { this[\"__proto__\"] = o; }\n      f.prototype = o;\n      return new f;\n    };\n  }\n\n  if (!Object.getPrototypeOf) {\n    Object.getPrototypeOf = function (o) {\n      return o[\"__proto__\"];\n    };\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = [];\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i);\n      return a;\n    };\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(clarinet.MAX_BUFFER_LENGTH, 10)\n      , maxActual = 0\n      ;\n    for (var buffer in buffers) {\n      var len = parser[buffer] === undefined ? 0 : parser[buffer].length;\n      if (len > maxAllowed) {\n        switch (buffer) {\n          case \"text\":\n            closeText(parser);\n          break;\n\n          default:\n            error(parser, \"Max buffer length exceeded: \"+ buffer);\n        }\n      }\n      maxActual = Math.max(maxActual, len);\n    }\n    parser.bufferCheckPosition = (clarinet.MAX_BUFFER_LENGTH - maxActual)\n                               + parser.position;\n  }\n\n  function clearBuffers (parser) {\n    for (var buffer in buffers) {\n      parser[buffer] = buffers[buffer];\n    }\n  }\n\n  var stringTokenPattern = /[\\\\\"\\n]/g;\n\n  function CParser (opt) {\n    if (!(this instanceof CParser)) return new CParser (opt);\n\n    var parser = this;\n    clearBuffers(parser);\n    parser.bufferCheckPosition = clarinet.MAX_BUFFER_LENGTH;\n    parser.q        = parser.c = parser.p = \"\";\n    parser.opt      = opt || {};\n    parser.closed   = parser.closedRoot = parser.sawRoot = false;\n    parser.tag      = parser.error = null;\n    parser.state    = S.BEGIN;\n    parser.stack    = new Array();\n    // mostly just for error reporting\n    parser.position = parser.column = 0;\n    parser.line     = 1;\n    parser.slashed  = false;\n    parser.unicodeI = 0;\n    parser.unicodeS = null;\n    parser.depth    = 0;\n    emit(parser, \"onready\");\n  }\n\n  CParser.prototype =\n    { end    : function () { end(this); }\n    , write  : write\n    , resume : function () { this.error = null; return this; }\n    , close  : function () { return this.write(null); }\n    };\n\n  try        { Stream = require(\"stream\").Stream; }\n  catch (ex) { Stream = function () {}; }\n\n  function createStream (opt) { return new CStream(opt); }\n\n  function CStream (opt) {\n    if (!(this instanceof CStream)) return new CStream(opt);\n\n    this._parser = new CParser(opt);\n    this.writable = true;\n    this.readable = true;\n\n    //var Buffer = this.Buffer || function Buffer () {}; // if we don't have Buffers, fake it so we can do `var instanceof Buffer` and not throw an error\n    this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n    this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n    this.temp_buffs = { \"2\": new Buffer(2), \"3\": new Buffer(3), \"4\": new Buffer(4) }; // for rebuilding chars split before boundary is reached\n    this.string = '';\n\n    var me = this;\n    Stream.apply(me);\n\n    this._parser.onend = function () { me.emit(\"end\"); };\n    this._parser.onerror = function (er) {\n      me.emit(\"error\", er);\n      me._parser.error = null;\n    };\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, \"on\" + ev,\n        { get          : function () { return me._parser[\"on\" + ev]; }\n        , set          : function (h) {\n            if (!h) {\n              me.removeAllListeners(ev);\n              me._parser[\"on\"+ev] = h;\n              return h;\n            }\n            me.on(ev, h);\n          }\n        , enumerable   : true\n        , configurable : false\n        });\n    });\n  }\n\n  CStream.prototype = Object.create(Stream.prototype,\n    { constructor: { value: CStream } });\n\n  CStream.prototype.write = function (data) {\n    data = new Buffer(data);\n    for (var i = 0; i < data.length; i++) {\n      var n = data[i];\n\n      // check for carry over of a multi byte char split between data chunks\n      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n      if (this.bytes_remaining > 0) {\n        for (var j = 0; j < this.bytes_remaining; j++) {\n          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = data[j];\n        }\n        this.string = this.temp_buffs[this.bytes_in_sequence].toString();\n        this.bytes_in_sequence = this.bytes_remaining = 0;\n\n        // move iterator forward by number of byte read during sequencing\n        i = i + j - 1;\n\n        // pass data to parser and move forward to parse rest of data\n        this._parser.write(this.string);\n        this.emit(\"data\", this.string);\n        continue;\n      }\n\n      // if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n      if (this.bytes_remaining === 0 && n >= 128) {\n        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n        if ((this.bytes_in_sequence + i) > data.length) { // if bytes needed to complete char fall outside data length, we have a boundary split\n\n          for (var k = 0; k <= (data.length - 1 - i); k++) {\n            this.temp_buffs[this.bytes_in_sequence][k] = data[i + k]; // fill temp data of correct size with bytes available in this chunk\n          }\n          this.bytes_remaining = (i + this.bytes_in_sequence) - data.length;\n\n          // immediately return as we need another chunk to sequence the character\n          return true;\n        } else {\n          this.string = data.slice(i, (i + this.bytes_in_sequence)).toString();\n          i = i + this.bytes_in_sequence - 1;\n\n          this._parser.write(this.string);\n          this.emit(\"data\", this.string);\n          continue;\n        }\n      }\n\n      // is there a range of characters that are immediately parsable?\n      for (var p = i; p < data.length; p++) {\n        if (data[p] >= 128) break;\n      }\n      this.string = data.slice(i, p).toString();\n      this._parser.write(this.string);\n      this.emit(\"data\", this.string);\n      i = p - 1;\n\n      // handle any remaining characters using multibyte logic\n      continue;\n    }\n  };\n\n  CStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) this._parser.write(chunk.toString());\n    this._parser.end();\n    return true;\n  };\n\n  CStream.prototype.on = function (ev, handler) {\n    var me = this;\n    if (!me._parser[\"on\"+ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser[\"on\"+ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]]\n                 : Array.apply(null, arguments);\n        args.splice(0, 0, ev);\n        me.emit.apply(me, args);\n      };\n    }\n    return Stream.prototype.on.call(me, ev, handler);\n  };\n\n  CStream.prototype.destroy = function () {\n    clearBuffers(this._parser);\n    this.emit(\"close\");\n  };\n\n  function emit(parser, event, data) {\n    if(clarinet.INFO) console.log('-- emit', event, data);\n    if (parser[event]) parser[event](data);\n  }\n\n  function emitNode(parser, event, data) {\n    closeValue(parser);\n    emit(parser, event, data);\n  }\n\n  function closeValue(parser, event) {\n    parser.textNode = textopts(parser.opt, parser.textNode);\n    if (parser.textNode !== undefined) {\n      emit(parser, (event ? event : \"onvalue\"), parser.textNode);\n    }\n    parser.textNode = undefined;\n  }\n\n  function closeNumber(parser) {\n    if (parser.numberNode)\n      emit(parser, \"onvalue\", parseFloat(parser.numberNode));\n    parser.numberNode = \"\";\n  }\n\n  function textopts (opt, text) {\n    if (text === undefined) {\n      return text;\n    }\n    if (opt.trim) text = text.trim();\n    if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n    return text;\n  }\n\n  function error (parser, er) {\n    closeValue(parser);\n    er += \"\\nLine: \"+parser.line+\n          \"\\nColumn: \"+parser.column+\n          \"\\nChar: \"+parser.c;\n    er = new Error(er);\n    parser.error = er;\n    emit(parser, \"onerror\", er);\n    return parser;\n  }\n\n  function end(parser) {\n    if (parser.state !== S.VALUE || parser.depth !== 0)\n      error(parser, \"Unexpected end\");\n\n    closeValue(parser);\n    parser.c      = \"\";\n    parser.closed = true;\n    emit(parser, \"onend\");\n    CParser.call(parser, parser.opt);\n    return parser;\n  }\n\n  function isWhitespace(c) {\n    return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;\n  }\n\n  function write (chunk) {\n    var parser = this;\n    if (this.error) throw this.error;\n    if (parser.closed) return error(parser,\n      \"Cannot write after close. Assign an onready handler.\");\n    if (chunk === null) return end(parser);\n    var i = 0, c = chunk.charCodeAt(0), p = parser.p;\n    var lockIncrements = false;\n    if (clarinet.DEBUG) console.log('write -> [' + chunk + ']');\n    while (c) {\n      p = c;\n      parser.c = c = chunk.charCodeAt(i++);\n      // if chunk doesnt have next, like streaming char by char\n      // this way we need to check if previous is really previous\n      // if not we need to reset to what the parser says is the previous\n      // from buffer\n      if(p !== c ) parser.p = p;\n      else p = parser.p;\n\n      if(!c) break;\n\n      if (clarinet.DEBUG) console.log(i,c,clarinet.STATE[parser.state]);\n      if (!lockIncrements) {\n        parser.position ++;\n        if (c === Char.lineFeed) {\n          parser.line ++;\n          parser.column = 0;\n        } else parser.column ++;\n      } else {\n        lockIncrements = false;\n      }\n      switch (parser.state) {\n\n        case S.BEGIN:\n          if (c === Char.openBrace) parser.state = S.OPEN_OBJECT;\n          else if (c === Char.openBracket) parser.state = S.OPEN_ARRAY;\n          else if (!isWhitespace(c))\n            error(parser, \"Non-whitespace before {[.\");\n        continue;\n\n        case S.OPEN_KEY:\n        case S.OPEN_OBJECT:\n          if (isWhitespace(c)) continue;\n          if(parser.state === S.OPEN_KEY) parser.stack.push(S.CLOSE_KEY);\n          else {\n            if(c === Char.closeBrace) {\n              emit(parser, 'onopenobject');\n              this.depth++;\n              emit(parser, 'oncloseobject');\n              this.depth--;\n              parser.state = parser.stack.pop() || S.VALUE;\n              continue;\n            } else  parser.stack.push(S.CLOSE_OBJECT);\n          }\n          if(c === Char.doubleQuote) parser.state = S.STRING;\n          else error(parser, \"Malformed object key should start with \\\"\");\n        continue;\n\n        case S.CLOSE_KEY:\n        case S.CLOSE_OBJECT:\n          if (isWhitespace(c)) continue;\n          var event = (parser.state === S.CLOSE_KEY) ? 'key' : 'object';\n          if(c === Char.colon) {\n            if(parser.state === S.CLOSE_OBJECT) {\n              parser.stack.push(S.CLOSE_OBJECT);\n              closeValue(parser, 'onopenobject');\n               this.depth++;\n            } else closeValue(parser, 'onkey');\n            parser.state  = S.VALUE;\n          } else if (c === Char.closeBrace) {\n            emitNode(parser, 'oncloseobject');\n            this.depth--;\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else if(c === Char.comma) {\n            if(parser.state === S.CLOSE_OBJECT)\n              parser.stack.push(S.CLOSE_OBJECT);\n            closeValue(parser);\n            parser.state  = S.OPEN_KEY;\n          } else error(parser, 'Bad object');\n        continue;\n\n        case S.OPEN_ARRAY: // after an array there always a value\n        case S.VALUE:\n          if (isWhitespace(c)) continue;\n          if(parser.state===S.OPEN_ARRAY) {\n            emit(parser, 'onopenarray');\n            this.depth++;\n            parser.state = S.VALUE;\n            if(c === Char.closeBracket) {\n              emit(parser, 'onclosearray');\n              this.depth--;\n              parser.state = parser.stack.pop() || S.VALUE;\n              continue;\n            } else {\n              parser.stack.push(S.CLOSE_ARRAY);\n            }\n          }\n               if(c === Char.doubleQuote) parser.state = S.STRING;\n          else if(c === Char.openBrace) parser.state = S.OPEN_OBJECT;\n          else if(c === Char.openBracket) parser.state = S.OPEN_ARRAY;\n          else if(c === Char.t) parser.state = S.TRUE;\n          else if(c === Char.f) parser.state = S.FALSE;\n          else if(c === Char.n) parser.state = S.NULL;\n          else if(c === Char.minus) { // keep and continue\n            parser.numberNode += \"-\";\n          } else if(Char._0 <= c && c <= Char._9) {\n            parser.numberNode += String.fromCharCode(c);\n            parser.state = S.NUMBER_DIGIT;\n          } else               error(parser, \"Bad value\");\n        continue;\n\n        case S.CLOSE_ARRAY:\n          if(c === Char.comma) {\n            parser.stack.push(S.CLOSE_ARRAY);\n            closeValue(parser, 'onvalue');\n            parser.state  = S.VALUE;\n          } else if (c === Char.closeBracket) {\n            emitNode(parser, 'onclosearray');\n            this.depth--;\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else if (isWhitespace(c))\n              continue;\n          else error(parser, 'Bad array');\n        continue;\n\n        case S.STRING:\n          if (parser.textNode === undefined) {\n            parser.textNode = \"\";\n          }\n\n          // thanks thejh, this is an about 50% performance improvement.\n          var starti              = i-1\n            , slashed = parser.slashed\n            , unicodeI = parser.unicodeI\n            ;\n          STRING_BIGLOOP: while (true) {\n            if (clarinet.DEBUG)\n              console.log(i,c,clarinet.STATE[parser.state]\n                         ,slashed);\n            // zero means \"no unicode active\". 1-4 mean \"parse some more\". end after 4.\n            while (unicodeI > 0) {\n              parser.unicodeS += String.fromCharCode(c);\n              c = chunk.charCodeAt(i++);\n              parser.position++;\n              if (unicodeI === 4) {\n                // TODO this might be slow? well, probably not used too often anyway\n                parser.textNode += String.fromCharCode(parseInt(parser.unicodeS, 16));\n                unicodeI = 0;\n                starti = i-1;\n              } else {\n                unicodeI++;\n              }\n              // we can just break here: no stuff we skipped that still has to be sliced out or so\n              if (!c) break STRING_BIGLOOP;\n            }\n            if (c === Char.doubleQuote && !slashed) {\n              parser.state = parser.stack.pop() || S.VALUE;\n              parser.textNode += chunk.substring(starti, i-1);\n              parser.position += i - 1 - starti;\n              break;\n            }\n            if (c === Char.backslash && !slashed) {\n              slashed = true;\n              parser.textNode += chunk.substring(starti, i-1);\n              parser.position += i - 1 - starti;\n              c = chunk.charCodeAt(i++);\n              parser.position++;\n              if (!c) break;\n            }\n            if (slashed) {\n              slashed = false;\n                   if (c === Char.n) { parser.textNode += '\\n'; }\n              else if (c === Char.r) { parser.textNode += '\\r'; }\n              else if (c === Char.t) { parser.textNode += '\\t'; }\n              else if (c === Char.f) { parser.textNode += '\\f'; }\n              else if (c === Char.b) { parser.textNode += '\\b'; }\n              else if (c === Char.u) {\n                // \\uxxxx. meh!\n                unicodeI = 1;\n                parser.unicodeS = '';\n              } else {\n                parser.textNode += String.fromCharCode(c);\n              }\n              c = chunk.charCodeAt(i++);\n              parser.position++;\n              starti = i-1;\n              if (!c) break;\n              else continue;\n            }\n\n            stringTokenPattern.lastIndex = i;\n            var reResult = stringTokenPattern.exec(chunk);\n            if (reResult === null) {\n              i = chunk.length+1;\n              parser.textNode += chunk.substring(starti, i-1);\n              parser.position += i - 1 - starti;\n              break;\n            }\n            i = reResult.index+1;\n            c = chunk.charCodeAt(reResult.index);\n            if (!c) {\n              parser.textNode += chunk.substring(starti, i-1);\n              parser.position += i - 1 - starti;\n              break;\n            }\n          }\n          parser.slashed = slashed;\n          parser.unicodeI = unicodeI;\n        continue;\n\n        case S.TRUE:\n          if (c === Char.r) parser.state = S.TRUE2;\n          else error(parser, 'Invalid true started with t'+ c);\n        continue;\n\n        case S.TRUE2:\n          if (c === Char.u) parser.state = S.TRUE3;\n          else error(parser, 'Invalid true started with tr'+ c);\n        continue;\n\n        case S.TRUE3:\n          if(c === Char.e) {\n            emit(parser, \"onvalue\", true);\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else error(parser, 'Invalid true started with tru'+ c);\n        continue;\n\n        case S.FALSE:\n          if (c === Char.a) parser.state = S.FALSE2;\n          else error(parser, 'Invalid false started with f'+ c);\n        continue;\n\n        case S.FALSE2:\n          if (c === Char.l) parser.state = S.FALSE3;\n          else error(parser, 'Invalid false started with fa'+ c);\n        continue;\n\n        case S.FALSE3:\n          if (c === Char.s) parser.state = S.FALSE4;\n          else error(parser, 'Invalid false started with fal'+ c);\n        continue;\n\n        case S.FALSE4:\n          if (c === Char.e) {\n            emit(parser, \"onvalue\", false);\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else error(parser, 'Invalid false started with fals'+ c);\n        continue;\n\n        case S.NULL:\n          if (c === Char.u) parser.state = S.NULL2;\n          else error(parser, 'Invalid null started with n'+ c);\n        continue;\n\n        case S.NULL2:\n          if (c === Char.l) parser.state = S.NULL3;\n          else error(parser, 'Invalid null started with nu'+ c);\n        continue;\n\n        case S.NULL3:\n          if(c === Char.l) {\n            emit(parser, \"onvalue\", null);\n            parser.state = parser.stack.pop() || S.VALUE;\n          } else error(parser, 'Invalid null started with nul'+ c);\n        continue;\n\n        case S.NUMBER_DECIMAL_POINT:\n          if(c === Char.period) {\n            parser.numberNode += \".\";\n            parser.state       = S.NUMBER_DIGIT;\n          } else error(parser, 'Leading zero not followed by .');\n        continue;\n\n        case S.NUMBER_DIGIT:\n          if(Char._0 <= c && c <= Char._9) parser.numberNode += String.fromCharCode(c);\n          else if (c === Char.period) {\n            if(parser.numberNode.indexOf('.')!==-1)\n              error(parser, 'Invalid number has two dots');\n            parser.numberNode += \".\";\n          } else if (c === Char.e || c === Char.E) {\n            if(parser.numberNode.indexOf('e')!==-1 ||\n               parser.numberNode.indexOf('E')!==-1 )\n               error(parser, 'Invalid number has two exponential');\n            parser.numberNode += \"e\";\n          } else if (c === Char.plus || c === Char.minus) {\n            if(!(p === Char.e || p === Char.E))\n              error(parser, 'Invalid symbol in number');\n            parser.numberNode += String.fromCharCode(c);\n          } else {\n            closeNumber(parser);\n            i--; // go back one\n            lockIncrements = true; // do not apply increments for a single cycle\n            parser.state = parser.stack.pop() || S.VALUE;\n          }\n        continue;\n\n        default:\n          error(parser, \"Unknown state: \" + parser.state);\n      }\n    }\n    if (parser.position >= parser.bufferCheckPosition)\n      checkBufferLength(parser);\n    return parser;\n  }\n\n})(typeof exports === \"undefined\" ? clarinet = {} : exports);\n", "//@ts-ignore\nimport clarinet from 'clarinet';\n\ntype ParseEvent = { type: string; key?: string; value?: any; err?: Error };\nexport type JsonNode =\n  | string\n  | boolean\n  | null\n  | number\n  | Map<string, JsonNode>\n  | JsonNode[];\n\nexport function parse(input: string): JsonNode {\n  const gen = processNode();\n  let out: JsonNode | undefined = undefined;\n  let err: Error | undefined = undefined;\n\n  function dispatch(obj: ParseEvent) {\n    try {\n      const res = gen.next(obj);\n      if (res.done) out = res.value as JsonNode;\n    } catch (e) {\n      err = e as Error;\n    }\n  }\n\n  const p = clarinet.parser();\n  p.onopenobject = (key: string) => dispatch({ type: 'openobject', key });\n  p.onopenarray = () => dispatch({ type: 'openarray' });\n  p.onkey = (key: string) => dispatch({ type: 'key', key });\n  p.onvalue = (value: string) => dispatch({ type: 'value', value });\n  p.oncloseobject = () => dispatch({ type: 'closeobject' });\n  p.onclosearray = () => dispatch({ type: 'closearray' });\n  p.onerror = (err: Error) => dispatch({ type: 'error', err });\n  //p.onend = () => dispatch({type:'end'});\n  gen.next();\n\n  p.write(input).close();\n  if (err) throw err;\n  return (out as unknown) as JsonNode;\n}\n\nexport function stringify(obj: JsonNode): string {\n  if (Array.isArray(obj)) return `[${obj.map(stringify).join(',')}]`;\n  if (obj instanceof Map)\n    return `{${[...obj]\n      .map(([k, v]) => JSON.stringify(k) + ':' + stringify(v))\n      .join(',')}}`;\n  return JSON.stringify(obj);\n}\n\nconst CLOSE_ARRAY = Symbol();\n\nfunction* processNode(): Generator<\n  any,\n  JsonNode | typeof CLOSE_ARRAY,\n  ParseEvent\n> {\n  const evt: ParseEvent = yield;\n  switch (evt.type) {\n    case 'value':\n      return evt.value;\n    case 'openobject':\n      const obj: Map<string, JsonNode> = new Map();\n      let key = evt.key;\n      if (key===undefined) yield; // must be 'objectclose'\n      while (key!==undefined) {\n        obj.set(key, (yield* processNode()) as JsonNode);\n        key = (yield).key; // 'key' or 'objectclose' event\n      }\n      return obj;\n    case 'openarray':\n      const arr: JsonNode[] = [];\n      let el: JsonNode | typeof CLOSE_ARRAY;\n      while (true) {\n        el = yield* processNode();\n        if (el === CLOSE_ARRAY) return arr;\n        arr.push(el);\n      }\n    case 'closearray':\n      return CLOSE_ARRAY;\n    case 'error':\n      throw evt.err;\n    default:\n      throw Error(`Unexpected ParseEvent ${evt.type}`);\n  }\n}\n", "const {\n  entries,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n} = Object;\n\nlet { freeze, seal, create } = Object; // eslint-disable-line import/no-mutable-exports\nlet { apply, construct } = typeof Reflect !== 'undefined' && Reflect;\n\nif (!freeze) {\n  freeze = function (x) {\n    return x;\n  };\n}\n\nif (!seal) {\n  seal = function (x) {\n    return x;\n  };\n}\n\nif (!apply) {\n  apply = function (fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\n\nif (!construct) {\n  construct = function (Func, args) {\n    return new Func(...args);\n  };\n}\n\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayIndexOf = unapply(Array.prototype.indexOf);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst arraySlice = unapply(Array.prototype.slice);\n\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringToString = unapply(String.prototype.toString);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\n\nconst objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\n\nconst regExpTest = unapply(RegExp.prototype.test);\n\nconst typeErrorCreate = unconstruct(TypeError);\n\n/**\n * Creates a new function that calls the given function with a specified thisArg and arguments.\n *\n * @param {Function} func - The function to be wrapped and called.\n * @returns {Function} A new function that calls the given function with a specified thisArg and arguments.\n */\nfunction unapply(func) {\n  return (thisArg, ...args) => apply(func, thisArg, args);\n}\n\n/**\n * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n *\n * @param {Function} func - The constructor function to be wrapped and called.\n * @returns {Function} A new function that constructs an instance of the given constructor function with the provided arguments.\n */\nfunction unconstruct(func) {\n  return (...args) => construct(func, args);\n}\n\n/**\n * Add properties to a lookup table\n *\n * @param {Object} set - The set to which elements will be added.\n * @param {Array} array - The array containing elements to be added to the set.\n * @param {Function} transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n * @returns {Object} The modified set with added elements.\n */\nfunction addToSet(set, array, transformCaseFunc = stringToLowerCase) {\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = transformCaseFunc(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n\n        element = lcElement;\n      }\n    }\n\n    set[element] = true;\n  }\n\n  return set;\n}\n\n/**\n * Clean up an array to harden against CSPP\n *\n * @param {Array} array - The array to be cleaned.\n * @returns {Array} The cleaned version of the array\n */\nfunction cleanArray(array) {\n  for (let index = 0; index < array.length; index++) {\n    const isPropertyExist = objectHasOwnProperty(array, index);\n\n    if (!isPropertyExist) {\n      array[index] = null;\n    }\n  }\n\n  return array;\n}\n\n/**\n * Shallow clone an object\n *\n * @param {Object} object - The object to be cloned.\n * @returns {Object} A new object that copies the original.\n */\nfunction clone(object) {\n  const newObject = create(null);\n\n  for (const [property, value] of entries(object)) {\n    const isPropertyExist = objectHasOwnProperty(object, property);\n\n    if (isPropertyExist) {\n      if (Array.isArray(value)) {\n        newObject[property] = cleanArray(value);\n      } else if (\n        value &&\n        typeof value === 'object' &&\n        value.constructor === Object\n      ) {\n        newObject[property] = clone(value);\n      } else {\n        newObject[property] = value;\n      }\n    }\n  }\n\n  return newObject;\n}\n\n/**\n * This method automatically checks if the prop is function or getter and behaves accordingly.\n *\n * @param {Object} object - The object to look up the getter function in its prototype chain.\n * @param {String} prop - The property name for which to find the getter function.\n * @returns {Function} The getter function found in the prototype chain or a fallback function.\n */\nfunction lookupGetter(object, prop) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n\n    object = getPrototypeOf(object);\n  }\n\n  function fallbackValue() {\n    return null;\n  }\n\n  return fallbackValue;\n}\n\nexport {\n  // Array\n  arrayForEach,\n  arrayIndexOf,\n  arrayPop,\n  arrayPush,\n  arraySlice,\n  // Object\n  entries,\n  freeze,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n  isFrozen,\n  setPrototypeOf,\n  seal,\n  clone,\n  create,\n  objectHasOwnProperty,\n  // RegExp\n  regExpTest,\n  // String\n  stringIndexOf,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringToString,\n  stringTrim,\n  // Errors\n  typeErrorCreate,\n  // Other\n  lookupGetter,\n  addToSet,\n  // Reflect\n  unapply,\n  unconstruct,\n};\n", "import { freeze } from './utils.js';\n\nexport const html = freeze([\n  'a',\n  'abbr',\n  'acronym',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'bdi',\n  'bdo',\n  'big',\n  'blink',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'center',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'content',\n  'data',\n  'datalist',\n  'dd',\n  'decorator',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'element',\n  'em',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'font',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'label',\n  'legend',\n  'li',\n  'main',\n  'map',\n  'mark',\n  'marquee',\n  'menu',\n  'menuitem',\n  'meter',\n  'nav',\n  'nobr',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'section',\n  'select',\n  'shadow',\n  'small',\n  'source',\n  'spacer',\n  'span',\n  'strike',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'tr',\n  'track',\n  'tt',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n]);\n\n// SVG\nexport const svg = freeze([\n  'svg',\n  'a',\n  'altglyph',\n  'altglyphdef',\n  'altglyphitem',\n  'animatecolor',\n  'animatemotion',\n  'animatetransform',\n  'circle',\n  'clippath',\n  'defs',\n  'desc',\n  'ellipse',\n  'filter',\n  'font',\n  'g',\n  'glyph',\n  'glyphref',\n  'hkern',\n  'image',\n  'line',\n  'lineargradient',\n  'marker',\n  'mask',\n  'metadata',\n  'mpath',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialgradient',\n  'rect',\n  'stop',\n  'style',\n  'switch',\n  'symbol',\n  'text',\n  'textpath',\n  'title',\n  'tref',\n  'tspan',\n  'view',\n  'vkern',\n]);\n\nexport const svgFilters = freeze([\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n]);\n\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nexport const svgDisallowed = freeze([\n  'animate',\n  'color-profile',\n  'cursor',\n  'discard',\n  'font-face',\n  'font-face-format',\n  'font-face-name',\n  'font-face-src',\n  'font-face-uri',\n  'foreignobject',\n  'hatch',\n  'hatchpath',\n  'mesh',\n  'meshgradient',\n  'meshpatch',\n  'meshrow',\n  'missing-glyph',\n  'script',\n  'set',\n  'solidcolor',\n  'unknown',\n  'use',\n]);\n\nexport const mathMl = freeze([\n  'math',\n  'menclose',\n  'merror',\n  'mfenced',\n  'mfrac',\n  'mglyph',\n  'mi',\n  'mlabeledtr',\n  'mmultiscripts',\n  'mn',\n  'mo',\n  'mover',\n  'mpadded',\n  'mphantom',\n  'mroot',\n  'mrow',\n  'ms',\n  'mspace',\n  'msqrt',\n  'mstyle',\n  'msub',\n  'msup',\n  'msubsup',\n  'mtable',\n  'mtd',\n  'mtext',\n  'mtr',\n  'munder',\n  'munderover',\n  'mprescripts',\n]);\n\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nexport const mathMlDisallowed = freeze([\n  'maction',\n  'maligngroup',\n  'malignmark',\n  'mlongdiv',\n  'mscarries',\n  'mscarry',\n  'msgroup',\n  'mstack',\n  'msline',\n  'msrow',\n  'semantics',\n  'annotation',\n  'annotation-xml',\n  'mprescripts',\n  'none',\n]);\n\nexport const text = freeze(['#text']);\n", "import { freeze } from './utils.js';\n\nexport const html = freeze([\n  'accept',\n  'action',\n  'align',\n  'alt',\n  'autocapitalize',\n  'autocomplete',\n  'autopictureinpicture',\n  'autoplay',\n  'background',\n  'bgcolor',\n  'border',\n  'capture',\n  'cellpadding',\n  'cellspacing',\n  'checked',\n  'cite',\n  'class',\n  'clear',\n  'color',\n  'cols',\n  'colspan',\n  'controls',\n  'controlslist',\n  'coords',\n  'crossorigin',\n  'datetime',\n  'decoding',\n  'default',\n  'dir',\n  'disabled',\n  'disablepictureinpicture',\n  'disableremoteplayback',\n  'download',\n  'draggable',\n  'enctype',\n  'enterkeyhint',\n  'face',\n  'for',\n  'headers',\n  'height',\n  'hidden',\n  'high',\n  'href',\n  'hreflang',\n  'id',\n  'inputmode',\n  'integrity',\n  'ismap',\n  'kind',\n  'label',\n  'lang',\n  'list',\n  'loading',\n  'loop',\n  'low',\n  'max',\n  'maxlength',\n  'media',\n  'method',\n  'min',\n  'minlength',\n  'multiple',\n  'muted',\n  'name',\n  'nonce',\n  'noshade',\n  'novalidate',\n  'nowrap',\n  'open',\n  'optimum',\n  'pattern',\n  'placeholder',\n  'playsinline',\n  'poster',\n  'preload',\n  'pubdate',\n  'radiogroup',\n  'readonly',\n  'rel',\n  'required',\n  'rev',\n  'reversed',\n  'role',\n  'rows',\n  'rowspan',\n  'spellcheck',\n  'scope',\n  'selected',\n  'shape',\n  'size',\n  'sizes',\n  'span',\n  'srclang',\n  'start',\n  'src',\n  'srcset',\n  'step',\n  'style',\n  'summary',\n  'tabindex',\n  'title',\n  'translate',\n  'type',\n  'usemap',\n  'valign',\n  'value',\n  'width',\n  'xmlns',\n  'slot',\n]);\n\nexport const svg = freeze([\n  'accent-height',\n  'accumulate',\n  'additive',\n  'alignment-baseline',\n  'ascent',\n  'attributename',\n  'attributetype',\n  'azimuth',\n  'basefrequency',\n  'baseline-shift',\n  'begin',\n  'bias',\n  'by',\n  'class',\n  'clip',\n  'clippathunits',\n  'clip-path',\n  'clip-rule',\n  'color',\n  'color-interpolation',\n  'color-interpolation-filters',\n  'color-profile',\n  'color-rendering',\n  'cx',\n  'cy',\n  'd',\n  'dx',\n  'dy',\n  'diffuseconstant',\n  'direction',\n  'display',\n  'divisor',\n  'dur',\n  'edgemode',\n  'elevation',\n  'end',\n  'fill',\n  'fill-opacity',\n  'fill-rule',\n  'filter',\n  'filterunits',\n  'flood-color',\n  'flood-opacity',\n  'font-family',\n  'font-size',\n  'font-size-adjust',\n  'font-stretch',\n  'font-style',\n  'font-variant',\n  'font-weight',\n  'fx',\n  'fy',\n  'g1',\n  'g2',\n  'glyph-name',\n  'glyphref',\n  'gradientunits',\n  'gradienttransform',\n  'height',\n  'href',\n  'id',\n  'image-rendering',\n  'in',\n  'in2',\n  'k',\n  'k1',\n  'k2',\n  'k3',\n  'k4',\n  'kerning',\n  'keypoints',\n  'keysplines',\n  'keytimes',\n  'lang',\n  'lengthadjust',\n  'letter-spacing',\n  'kernelmatrix',\n  'kernelunitlength',\n  'lighting-color',\n  'local',\n  'marker-end',\n  'marker-mid',\n  'marker-start',\n  'markerheight',\n  'markerunits',\n  'markerwidth',\n  'maskcontentunits',\n  'maskunits',\n  'max',\n  'mask',\n  'media',\n  'method',\n  'mode',\n  'min',\n  'name',\n  'numoctaves',\n  'offset',\n  'operator',\n  'opacity',\n  'order',\n  'orient',\n  'orientation',\n  'origin',\n  'overflow',\n  'paint-order',\n  'path',\n  'pathlength',\n  'patterncontentunits',\n  'patterntransform',\n  'patternunits',\n  'points',\n  'preservealpha',\n  'preserveaspectratio',\n  'primitiveunits',\n  'r',\n  'rx',\n  'ry',\n  'radius',\n  'refx',\n  'refy',\n  'repeatcount',\n  'repeatdur',\n  'restart',\n  'result',\n  'rotate',\n  'scale',\n  'seed',\n  'shape-rendering',\n  'specularconstant',\n  'specularexponent',\n  'spreadmethod',\n  'startoffset',\n  'stddeviation',\n  'stitchtiles',\n  'stop-color',\n  'stop-opacity',\n  'stroke-dasharray',\n  'stroke-dashoffset',\n  'stroke-linecap',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke',\n  'stroke-width',\n  'style',\n  'surfacescale',\n  'systemlanguage',\n  'tabindex',\n  'targetx',\n  'targety',\n  'transform',\n  'transform-origin',\n  'text-anchor',\n  'text-decoration',\n  'text-rendering',\n  'textlength',\n  'type',\n  'u1',\n  'u2',\n  'unicode',\n  'values',\n  'viewbox',\n  'visibility',\n  'version',\n  'vert-adv-y',\n  'vert-origin-x',\n  'vert-origin-y',\n  'width',\n  'word-spacing',\n  'wrap',\n  'writing-mode',\n  'xchannelselector',\n  'ychannelselector',\n  'x',\n  'x1',\n  'x2',\n  'xmlns',\n  'y',\n  'y1',\n  'y2',\n  'z',\n  'zoomandpan',\n]);\n\nexport const mathMl = freeze([\n  'accent',\n  'accentunder',\n  'align',\n  'bevelled',\n  'close',\n  'columnsalign',\n  'columnlines',\n  'columnspan',\n  'denomalign',\n  'depth',\n  'dir',\n  'display',\n  'displaystyle',\n  'encoding',\n  'fence',\n  'frame',\n  'height',\n  'href',\n  'id',\n  'largeop',\n  'length',\n  'linethickness',\n  'lspace',\n  'lquote',\n  'mathbackground',\n  'mathcolor',\n  'mathsize',\n  'mathvariant',\n  'maxsize',\n  'minsize',\n  'movablelimits',\n  'notation',\n  'numalign',\n  'open',\n  'rowalign',\n  'rowlines',\n  'rowspacing',\n  'rowspan',\n  'rspace',\n  'rquote',\n  'scriptlevel',\n  'scriptminsize',\n  'scriptsizemultiplier',\n  'selection',\n  'separator',\n  'separators',\n  'stretchy',\n  'subscriptshift',\n  'supscriptshift',\n  'symmetric',\n  'voffset',\n  'width',\n  'xmlns',\n]);\n\nexport const xml = freeze([\n  'xlink:href',\n  'xml:id',\n  'xlink:title',\n  'xml:space',\n  'xmlns:xlink',\n]);\n", "import { seal } from './utils.js';\n\n// eslint-disable-next-line unicorn/better-regex\nexport const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nexport const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nexport const TMPLIT_EXPR = seal(/\\${[\\w\\W]*}/gm);\nexport const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\nexport const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nexport const IS_ALLOWED_URI = seal(\n  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nexport const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nexport const ATTR_WHITESPACE = seal(\n  /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nexport const DOCTYPE_NAME = seal(/^html$/i);\nexport const CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n", "import * as TAGS from './tags.js';\nimport * as ATTRS from './attrs.js';\nimport * as EXPRESSIONS from './regexp.js';\nimport {\n  addToSet,\n  clone,\n  entries,\n  freeze,\n  arrayForEach,\n  arrayPop,\n  arrayPush,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringToString,\n  stringIndexOf,\n  stringTrim,\n  regExpTest,\n  typeErrorCreate,\n  lookupGetter,\n  create,\n  objectHasOwnProperty,\n} from './utils.js';\n\nconst getGlobal = function () {\n  return typeof window === 'undefined' ? null : window;\n};\n\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param {TrustedTypePolicyFactory} trustedTypes The policy factory.\n * @param {HTMLScriptElement} purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n * @return {TrustedTypePolicy} The policy created (or null, if Trusted Types\n * are not supported or creating the policy failed).\n */\nconst _createTrustedTypesPolicy = function (trustedTypes, purifyHostElement) {\n  if (\n    typeof trustedTypes !== 'object' ||\n    typeof trustedTypes.createPolicy !== 'function'\n  ) {\n    return null;\n  }\n\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n    suffix = purifyHostElement.getAttribute(ATTR_NAME);\n  }\n\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n      createScriptURL(scriptUrl) {\n        return scriptUrl;\n      },\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn(\n      'TrustedTypes policy ' + policyName + ' could not be created.'\n    );\n    return null;\n  }\n};\n\nfunction createDOMPurify(window = getGlobal()) {\n  const DOMPurify = (root) => createDOMPurify(root);\n\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n  DOMPurify.version = VERSION;\n\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n  DOMPurify.removed = [];\n\n  if (!window || !window.document || window.document.nodeType !== 9) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n\n    return DOMPurify;\n  }\n\n  let { document } = window;\n\n  const originalDocument = document;\n  const currentScript = originalDocument.currentScript;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n    HTMLFormElement,\n    DOMParser,\n    trustedTypes,\n  } = window;\n\n  const ElementPrototype = Element.prototype;\n\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n\n  let trustedTypesPolicy;\n  let emptyHTML = '';\n\n  const {\n    implementation,\n    createNodeIterator,\n    createDocumentFragment,\n    getElementsByTagName,\n  } = document;\n  const { importNode } = originalDocument;\n\n  let hooks = {};\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported =\n    typeof entries === 'function' &&\n    typeof getParentNode === 'function' &&\n    implementation &&\n    implementation.createHTMLDocument !== undefined;\n\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    TMPLIT_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n    CUSTOM_ELEMENT,\n  } = EXPRESSIONS;\n\n  let { IS_ALLOWED_URI } = EXPRESSIONS;\n\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [\n    ...TAGS.html,\n    ...TAGS.svg,\n    ...TAGS.svgFilters,\n    ...TAGS.mathMl,\n    ...TAGS.text,\n  ]);\n\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [\n    ...ATTRS.html,\n    ...ATTRS.svg,\n    ...ATTRS.mathMl,\n    ...ATTRS.xml,\n  ]);\n\n  /*\n   * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n  let CUSTOM_ELEMENT_HANDLING = Object.seal(\n    create(null, {\n      tagNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null,\n      },\n      attributeNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null,\n      },\n      allowCustomizedBuiltInElements: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: false,\n      },\n    })\n  );\n\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n  let ALLOW_SELF_CLOSE_IN_ATTR = true;\n\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n  let SANITIZE_DOM = true;\n\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (§7.3.3)\n   *   - DOM Tree Accessors (§3.1.5)\n   *   - Form Element Parent-Child Relations (§4.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n   *   - HTMLCollection (§4.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n  let SANITIZE_NAMED_PROPS = false;\n  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES = {};\n\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  let FORBID_CONTENTS = null;\n  const DEFAULT_FORBID_CONTENTS = addToSet({}, [\n    'annotation-xml',\n    'audio',\n    'colgroup',\n    'desc',\n    'foreignobject',\n    'head',\n    'iframe',\n    'math',\n    'mi',\n    'mn',\n    'mo',\n    'ms',\n    'mtext',\n    'noembed',\n    'noframes',\n    'noscript',\n    'plaintext',\n    'script',\n    'style',\n    'svg',\n    'template',\n    'thead',\n    'title',\n    'video',\n    'xmp',\n  ]);\n\n  /* Tags that are safe for data: URIs */\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, [\n    'audio',\n    'video',\n    'img',\n    'source',\n    'image',\n    'track',\n  ]);\n\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [\n    'alt',\n    'class',\n    'for',\n    'id',\n    'label',\n    'name',\n    'pattern',\n    'placeholder',\n    'role',\n    'summary',\n    'title',\n    'value',\n    'style',\n    'xmlns',\n  ]);\n\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n  let NAMESPACE = HTML_NAMESPACE;\n  let IS_EMPTY_INPUT = false;\n\n  /* Allowed XHTML+XML namespaces */\n  let ALLOWED_NAMESPACES = null;\n  const DEFAULT_ALLOWED_NAMESPACES = addToSet(\n    {},\n    [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE],\n    stringToString\n  );\n\n  /* Parsing of strict XHTML documents */\n  let PARSER_MEDIA_TYPE = null;\n  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  let transformCaseFunc = null;\n\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG = null;\n\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n\n  const formElement = document.createElement('form');\n\n  const isRegexOrFunction = function (testValue) {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n\n  /**\n   * _parseConfig\n   *\n   * @param  {Object} cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function (cfg = {}) {\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n\n    PARSER_MEDIA_TYPE =\n      // eslint-disable-next-line unicorn/prefer-includes\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1\n        ? DEFAULT_PARSER_MEDIA_TYPE\n        : cfg.PARSER_MEDIA_TYPE;\n\n    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n    transformCaseFunc =\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml'\n        ? stringToString\n        : stringToLowerCase;\n\n    /* Set configuration parameters */\n    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS')\n      ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc)\n      : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR')\n      ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc)\n      : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES')\n      ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString)\n      : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR')\n      ? addToSet(\n          clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent\n          cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent\n          transformCaseFunc // eslint-disable-line indent\n        ) // eslint-disable-line indent\n      : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS')\n      ? addToSet(\n          clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent\n          cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent\n          transformCaseFunc // eslint-disable-line indent\n        ) // eslint-disable-line indent\n      : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS')\n      ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc)\n      : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS')\n      ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc)\n      : {};\n    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR')\n      ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc)\n      : {};\n    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES')\n      ? cfg.USE_PROFILES\n      : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI = cfg.ALLOWED_URI_REGEXP || EXPRESSIONS.IS_ALLOWED_URI;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)\n    ) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck =\n        cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)\n    ) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck =\n        cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n\n    if (\n      cfg.CUSTOM_ELEMENT_HANDLING &&\n      typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements ===\n        'boolean'\n    ) {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements =\n        cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, TAGS.text);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, TAGS.html);\n        addToSet(ALLOWED_ATTR, ATTRS.html);\n      }\n\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svgFilters);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, TAGS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n    }\n\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n\n    if (cfg.TRUSTED_TYPES_POLICY) {\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n        throw typeErrorCreate(\n          'TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.'\n        );\n      }\n\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n        throw typeErrorCreate(\n          'TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.'\n        );\n      }\n\n      // Overwrite existing TrustedTypes policy.\n      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n\n      // Sign local variables required by `sanitize`.\n      emptyHTML = trustedTypesPolicy.createHTML('');\n    } else {\n      // Uninitialized policy, attempt to initialize the internal dompurify policy.\n      if (trustedTypesPolicy === undefined) {\n        trustedTypesPolicy = _createTrustedTypesPolicy(\n          trustedTypes,\n          currentScript\n        );\n      }\n\n      // If creating the internal policy succeeded sign internal variables.\n      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      }\n    }\n\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n\n    CONFIG = cfg;\n  };\n\n  const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [\n    'mi',\n    'mo',\n    'mn',\n    'ms',\n    'mtext',\n  ]);\n\n  const HTML_INTEGRATION_POINTS = addToSet({}, [\n    'foreignobject',\n    'desc',\n    'title',\n    'annotation-xml',\n  ]);\n\n  // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, [\n    'title',\n    'style',\n    'font',\n    'a',\n    'script',\n  ]);\n\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  const ALL_SVG_TAGS = addToSet({}, [\n    ...TAGS.svg,\n    ...TAGS.svgFilters,\n    ...TAGS.svgDisallowed,\n  ]);\n  const ALL_MATHML_TAGS = addToSet({}, [\n    ...TAGS.mathMl,\n    ...TAGS.mathMlDisallowed,\n  ]);\n\n  /**\n   * @param  {Element} element a DOM element whose namespace is being checked\n   * @returns {boolean} Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  const _checkValidNamespace = function (element) {\n    let parent = getParentNode(element);\n\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template',\n      };\n    }\n\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n\n      // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return (\n          tagName === 'svg' &&\n          (parentTagName === 'annotation-xml' ||\n            MATHML_TEXT_INTEGRATION_POINTS[parentTagName])\n        );\n      }\n\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (\n        parent.namespaceURI === SVG_NAMESPACE &&\n        !HTML_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      if (\n        parent.namespaceURI === MATHML_NAMESPACE &&\n        !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return (\n        !ALL_MATHML_TAGS[tagName] &&\n        (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName])\n      );\n    }\n\n    // For XHTML and XML documents that support custom namespaces\n    if (\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml' &&\n      ALLOWED_NAMESPACES[element.namespaceURI]\n    ) {\n      return true;\n    }\n\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n    return false;\n  };\n\n  /**\n   * _forceRemove\n   *\n   * @param  {Node} node a DOM node\n   */\n  const _forceRemove = function (node) {\n    arrayPush(DOMPurify.removed, { element: node });\n\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      node.parentNode.removeChild(node);\n    } catch (_) {\n      node.remove();\n    }\n  };\n\n  /**\n   * _removeAttribute\n   *\n   * @param  {String} name an Attribute name\n   * @param  {Node} node a DOM node\n   */\n  const _removeAttribute = function (name, node) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: node.getAttributeNode(name),\n        from: node,\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: node,\n      });\n    }\n\n    node.removeAttribute(name);\n\n    // We void attribute values for unremovable \"is\"\" attributes\n    if (name === 'is' && !ALLOWED_ATTR[name]) {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(node);\n        } catch (_) {}\n      } else {\n        try {\n          node.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n\n  /**\n   * _initDocument\n   *\n   * @param  {String} dirty a string of dirty markup\n   * @return {Document} a DOM, filled with the dirty markup\n   */\n  const _initDocument = function (dirty) {\n    /* Create a HTML document */\n    let doc = null;\n    let leadingWhitespace = null;\n\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n\n    if (\n      PARSER_MEDIA_TYPE === 'application/xhtml+xml' &&\n      NAMESPACE === HTML_NAMESPACE\n    ) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty =\n        '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' +\n        dirty +\n        '</body></html>';\n    }\n\n    const dirtyPayload = trustedTypesPolicy\n      ? trustedTypesPolicy.createHTML(dirty)\n      : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT\n          ? emptyHTML\n          : dirtyPayload;\n      } catch (_) {\n        // Syntax error if dirtyPayload is invalid xml\n      }\n    }\n\n    const body = doc.body || doc.documentElement;\n\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(\n        document.createTextNode(leadingWhitespace),\n        body.childNodes[0] || null\n      );\n    }\n\n    /* Work on whole document or just its body */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(\n        doc,\n        WHOLE_DOCUMENT ? 'html' : 'body'\n      )[0];\n    }\n\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n\n  /**\n   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n   *\n   * @param  {Node} root The root element or node to start traversing on.\n   * @return {NodeIterator} The created NodeIterator\n   */\n  const _createNodeIterator = function (root) {\n    return createNodeIterator.call(\n      root.ownerDocument || root,\n      root,\n      // eslint-disable-next-line no-bitwise\n      NodeFilter.SHOW_ELEMENT |\n        NodeFilter.SHOW_COMMENT |\n        NodeFilter.SHOW_TEXT |\n        NodeFilter.SHOW_PROCESSING_INSTRUCTION |\n        NodeFilter.SHOW_CDATA_SECTION,\n      null\n    );\n  };\n\n  /**\n   * _isClobbered\n   *\n   * @param  {Node} elm element to check for clobbering attacks\n   * @return {Boolean} true if clobbered, false if safe\n   */\n  const _isClobbered = function (elm) {\n    return (\n      elm instanceof HTMLFormElement &&\n      (typeof elm.nodeName !== 'string' ||\n        typeof elm.textContent !== 'string' ||\n        typeof elm.removeChild !== 'function' ||\n        !(elm.attributes instanceof NamedNodeMap) ||\n        typeof elm.removeAttribute !== 'function' ||\n        typeof elm.setAttribute !== 'function' ||\n        typeof elm.namespaceURI !== 'string' ||\n        typeof elm.insertBefore !== 'function' ||\n        typeof elm.hasChildNodes !== 'function')\n    );\n  };\n\n  /**\n   * Checks whether the given object is a DOM node.\n   *\n   * @param  {Node} object object to check whether it's a DOM node\n   * @return {Boolean} true is object is a DOM node\n   */\n  const _isNode = function (object) {\n    return typeof Node === 'function' && object instanceof Node;\n  };\n\n  /**\n   * _executeHook\n   * Execute user configurable hooks\n   *\n   * @param  {String} entryPoint  Name of the hook's entry point\n   * @param  {Node} currentNode node to work on with the hook\n   * @param  {Object} data additional hook parameters\n   */\n  const _executeHook = function (entryPoint, currentNode, data) {\n    if (!hooks[entryPoint]) {\n      return;\n    }\n\n    arrayForEach(hooks[entryPoint], (hook) => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  };\n\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   *\n   * @param   {Node} currentNode to check for permission to exist\n   * @return  {Boolean} true if node was killed, false if left alive\n   */\n  const _sanitizeElements = function (currentNode) {\n    let content = null;\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeElements', currentNode, null);\n\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Now let's check the element's type and name */\n    const tagName = transformCaseFunc(currentNode.nodeName);\n\n    /* Execute a hook if present */\n    _executeHook('uponSanitizeElement', currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS,\n    });\n\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (\n      currentNode.hasChildNodes() &&\n      !_isNode(currentNode.firstElementChild) &&\n      regExpTest(/<[/\\w]/g, currentNode.innerHTML) &&\n      regExpTest(/<[/\\w]/g, currentNode.textContent)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove any ocurrence of processing instructions */\n    if (currentNode.nodeType === 7) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n        if (\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n          regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)\n        ) {\n          return false;\n        }\n\n        if (\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n          CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)\n        ) {\n          return false;\n        }\n      }\n\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n\n        if (childNodes && parentNode) {\n          const childCount = childNodes.length;\n\n          for (let i = childCount - 1; i >= 0; --i) {\n            parentNode.insertBefore(\n              cloneNode(childNodes[i], true),\n              getNextSibling(currentNode)\n            );\n          }\n        }\n      }\n\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n    if (\n      (tagName === 'noscript' ||\n        tagName === 'noembed' ||\n        tagName === 'noframes') &&\n      regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n        content = stringReplace(content, expr, ' ');\n      });\n\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\n        currentNode.textContent = content;\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeElements', currentNode, null);\n\n    return false;\n  };\n\n  /**\n   * _isValidAttribute\n   *\n   * @param  {string} lcTag Lowercase tag name of containing element.\n   * @param  {string} lcName Lowercase attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function (lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (\n      SANITIZE_DOM &&\n      (lcName === 'id' || lcName === 'name') &&\n      (value in document || value in formElement)\n    ) {\n      return false;\n    }\n\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (\n      ALLOW_DATA_ATTR &&\n      !FORBID_ATTR[lcName] &&\n      regExpTest(DATA_ATTR, lcName)\n    ) {\n      // This attribute is safe\n    } else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) {\n      // This attribute is safe\n      /* Otherwise, check the name is permitted */\n    } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if (\n        // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n        (_isBasicCustomElement(lcTag) &&\n          ((CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag)) ||\n            (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag))) &&\n          ((CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName)) ||\n            (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)))) ||\n        // Alternative, second condition checks if it's an `is`-attribute, AND\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        (lcName === 'is' &&\n          CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements &&\n          ((CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp &&\n            regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value)) ||\n            (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function &&\n              CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))))\n      ) {\n        // If user has supplied a regexp or function in CUSTOM_ELEMENT_HANDLING.tagNameCheck, we need to also allow derived custom elements using the same tagName test.\n        // Additionally, we need to allow attributes passing the CUSTOM_ELEMENT_HANDLING.attributeNameCheck user has configured, as custom elements can define these at their own discretion.\n      } else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) {\n      // This attribute is safe\n      /* Check no script, data or unknown possibly unsafe URI\n        unless we know URI values are safe for that attribute */\n    } else if (\n      regExpTest(IS_ALLOWED_URI, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Keep image data URIs alive if src/xlink:href is allowed */\n      /* Further prevent gadget XSS for dynamically built script tags */\n    } else if (\n      (lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') &&\n      lcTag !== 'script' &&\n      stringIndexOf(value, 'data:') === 0 &&\n      DATA_URI_TAGS[lcTag]\n    ) {\n      // This attribute is safe\n      /* Allow unknown protocols: This provides support for links that\n        are handled by protocol handlers which may be unknown ahead of\n        time, e.g. fb:, spotify: */\n    } else if (\n      ALLOW_UNKNOWN_PROTOCOLS &&\n      !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Check for binary attributes */\n    } else if (value) {\n      return false;\n    } else {\n      // Binary attributes are safe at this point\n      /* Anything else, presume unsafe, do not add it back */\n    }\n\n    return true;\n  };\n\n  /**\n   * _isBasicCustomElement\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   *\n   * @param {string} tagName name of the tag of the node to sanitize\n   * @returns {boolean} Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n   */\n  const _isBasicCustomElement = function (tagName) {\n    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n  };\n\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param  {Node} currentNode to sanitize\n   */\n  const _sanitizeAttributes = function (currentNode) {\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n    const { attributes } = currentNode;\n\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes) {\n      return;\n    }\n\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR,\n    };\n    let l = attributes.length;\n\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      const attr = attributes[l];\n      const { name, namespaceURI, value: attrValue } = attr;\n      const lcName = transformCaseFunc(name);\n\n      let value = name === 'value' ? attrValue : stringTrim(attrValue);\n\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n      value = hookEvent.attrValue;\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n\n      /* Remove attribute */\n      _removeAttribute(name, currentNode);\n\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n\n      /* Work around a security issue in jQuery 3.0 */\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n          value = stringReplace(value, expr, ' ');\n        });\n      }\n\n      /* Is `value` valid for this attribute? */\n      const lcTag = transformCaseFunc(currentNode.nodeName);\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode);\n\n        // Prefix the value and later re-create the attribute with the sanitized value\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n\n      /* Handle attributes that require Trusted Types */\n      if (\n        trustedTypesPolicy &&\n        typeof trustedTypes === 'object' &&\n        typeof trustedTypes.getAttributeType === 'function'\n      ) {\n        if (namespaceURI) {\n          /* Namespaces are not yet supported, see https://bugs.chromium.org/p/chromium/issues/detail?id=1305293 */\n        } else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML': {\n              value = trustedTypesPolicy.createHTML(value);\n              break;\n            }\n\n            case 'TrustedScriptURL': {\n              value = trustedTypesPolicy.createScriptURL(value);\n              break;\n            }\n\n            default: {\n              break;\n            }\n          }\n        }\n      }\n\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n\n        arrayPop(DOMPurify.removed);\n      } catch (_) {}\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeAttributes', currentNode, null);\n  };\n\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param  {DocumentFragment} fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function (fragment) {\n    let shadowNode = null;\n    const shadowIterator = _createNodeIterator(fragment);\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n    while ((shadowNode = shadowIterator.nextNode())) {\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(shadowNode)) {\n        continue;\n      }\n\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(shadowNode);\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeShadowDOM', fragment, null);\n  };\n\n  /**\n   * Sanitize\n   * Public method providing core sanitation functionality\n   *\n   * @param {String|Node} dirty string or DOM node\n   * @param {Object} cfg object\n   */\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty, cfg = {}) {\n    let body = null;\n    let importedNode = null;\n    let currentNode = null;\n    let returnNode = null;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    IS_EMPTY_INPUT = !dirty;\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n\n    /* Return dirty HTML if DOMPurify cannot run */\n    if (!DOMPurify.isSupported) {\n      return dirty;\n    }\n\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if (dirty.nodeName) {\n        const tagName = transformCaseFunc(dirty.nodeName);\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate(\n            'root node is forbidden and cannot be sanitized in-place'\n          );\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (\n        !RETURN_DOM &&\n        !SAFE_FOR_TEMPLATES &&\n        !WHOLE_DOCUMENT &&\n        // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1\n      ) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n          ? trustedTypesPolicy.createHTML(dirty)\n          : dirty;\n      }\n\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n\n    /* Get node iterator */\n    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n\n    /* Now start iterating over the created document */\n    while ((currentNode = nodeIterator.nextNode())) {\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(currentNode)) {\n        continue;\n      }\n\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(currentNode);\n    }\n\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n\n      return returnNode;\n    }\n\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n\n    /* Serialize doctype if allowed */\n    if (\n      WHOLE_DOCUMENT &&\n      ALLOWED_TAGS['!doctype'] &&\n      body.ownerDocument &&\n      body.ownerDocument.doctype &&\n      body.ownerDocument.doctype.name &&\n      regExpTest(EXPRESSIONS.DOCTYPE_NAME, body.ownerDocument.doctype.name)\n    ) {\n      serializedHTML =\n        '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], (expr) => {\n        serializedHTML = stringReplace(serializedHTML, expr, ' ');\n      });\n    }\n\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n      ? trustedTypesPolicy.createHTML(serializedHTML)\n      : serializedHTML;\n  };\n\n  /**\n   * Public method to set the configuration once\n   * setConfig\n   *\n   * @param {Object} cfg configuration object\n   */\n  DOMPurify.setConfig = function (cfg = {}) {\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n\n  /**\n   * Public method to remove the configuration\n   * clearConfig\n   *\n   */\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n\n  /**\n   * Public method to check if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   * isValidAttribute\n   *\n   * @param  {String} tag Tag name of containing element.\n   * @param  {String} attr Attribute name.\n   * @param  {String} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n   */\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n\n    const lcTag = transformCaseFunc(tag);\n    const lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n\n  /**\n   * AddHook\n   * Public method to add DOMPurify hooks\n   *\n   * @param {String} entryPoint entry point for the hook to add\n   * @param {Function} hookFunction function to execute\n   */\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n\n    hooks[entryPoint] = hooks[entryPoint] || [];\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n\n  /**\n   * RemoveHook\n   * Public method to remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if more are present)\n   *\n   * @param {String} entryPoint entry point for the hook to remove\n   * @return {Function} removed(popped) hook\n   */\n  DOMPurify.removeHook = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      return arrayPop(hooks[entryPoint]);\n    }\n  };\n\n  /**\n   * RemoveHooks\n   * Public method to remove all DOMPurify hooks at a given entryPoint\n   *\n   * @param  {String} entryPoint entry point for the hooks to remove\n   */\n  DOMPurify.removeHooks = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint] = [];\n    }\n  };\n\n  /**\n   * RemoveAllHooks\n   * Public method to remove all DOMPurify hooks\n   */\n  DOMPurify.removeAllHooks = function () {\n    hooks = {};\n  };\n\n  return DOMPurify;\n}\n\nexport default createDOMPurify();\n", "const DOMPurify = require('dompurify');\r\n\r\n//#### Utils\r\nmodule.exports =\r\nclass Utils {\r\n    //# MODEL\r\n    constructor(parentContext) {\r\n        let $ = this;\r\n        $.parentContext = parentContext;\r\n\r\n    }\r\n\r\n    /**\r\n     * @param {string} string\r\n     * @returns {string}\r\n     */\r\n    escape(string) {\r\n        return string\r\n            .replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&#039;\");\r\n    }\r\n\r\n    /**\r\n     * @param {map|array} jsonMap\r\n     * @param {boolean} safeHTML\r\n     * @returns {object} DOM\r\n     */\r\n    mapToHtmlList(jsonMap, safeHTML = false, jsonSchema = undefined) {\r\n        let $ = this;\r\n        // Parsing check\r\n        try {\r\n            $.parentContext.mapToJSON(jsonMap);\r\n        } catch (error) {\r\n            console.log(error)\r\n            throw new Error(\"Provided map value doesn't passes JSON.parse()\")\r\n        }\r\n        var jsonItemIndex = 0,\r\n            list = document.createElement('ul'),\r\n            schema;\r\n        if (jsonSchema !== undefined) {\r\n            schema = JSON.parse(jsonSchema);\r\n        }\r\n        list.className = 'DAMON-List';\r\n        recurse(jsonMap, list);\r\n        return list;\r\n        /**\r\n         * @param {map|array} jsonMap\r\n         * @param {object} listItem\r\n         * @returns {object} DOM\r\n         */\r\n        function recurse(jsonMap, listItem) {\r\n            if (\r\n                typeof listItem !== 'object'\r\n                || listItem == null\r\n                || Array.isArray(listItem)\r\n            ) {\r\n                throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n            }\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                if (listItem.tagName == \"UL\") {\r\n                    for (const [key, value] of jsonMap) {\r\n                        let newList = document.createElement('ul'),\r\n                            newDiv = document.createElement('code'),\r\n                            keySpan = document.createElement('span'),\r\n                            newListItem = document.createElement('li');\r\n                        keySpan.className = \"type-key\";\r\n                        if (/^https?:\\/\\//.test(key)) {\r\n                            let keyLink = DOMPurify.sanitize(`<a href=\"${ key }\">${ key }</a>`);\r\n                            keySpan.innerHTML = keyLink;\r\n                        } else {\r\n                            if (\r\n                                jsonSchema !== undefined\r\n                                && key in schema['@context']\r\n                            ) {\r\n                                keySpan.innerHTML =\r\n                                    DOMPurify.sanitize(\r\n                                        `<a href=\"${ schema['@context'][key]['@id'] }\">${ key }</a>`\r\n                                    );\r\n                            } else {\r\n                                keySpan.textContent = key;\r\n                            }\r\n                        }\r\n                        if (\r\n                            typeof value === 'object'\r\n                            && value !== null\r\n                        ) {\r\n                            if (Array.isArray(value)) {\r\n                                if (\r\n                                    jsonMap.damonInlineArrays !== undefined\r\n                                    && jsonMap.damonInlineArrays.indexOf(key) > -1\r\n                                ) {\r\n                                    newDiv.innerHTML = keySpan.outerHTML + ': [';\r\n                                    for (let j = 0, k = value.length; j < k; j++) {\r\n                                        let childValueSpan = document.createElement('span'),\r\n                                            childValue = value[j];\r\n                                        if (childValue === true) {\r\n                                            childValueSpan.textContent = \"true\";\r\n                                            childValueSpan.className = \"type-boolean\";\r\n                                        } else if (childValue === false) {\r\n                                            childValueSpan.textContent = \"false\";\r\n                                            childValueSpan.className = \"type-boolean\";\r\n                                        } else if (childValue === null) {\r\n                                            childValueSpan.textContent = \"null\";\r\n                                            childValueSpan.className = \"type-null\";\r\n                                        } else if (\r\n                                            Number.isFinite(childValue)\r\n                                            && !Number.isNaN(childValue)\r\n                                        ) {\r\n                                            childValueSpan.textContent = childValue + \"\";\r\n                                            childValueSpan.className = \"type-number\";\r\n                                        } else {\r\n                                            if (safeHTML) {\r\n                                                if (/^https?:\\/\\//.test(childValue)) {\r\n                                                    childValueSpan.innerHTML =\r\n                                                        DOMPurify.sanitize(`<a href=\"${ childValue }\">\"${ childValue }\"</a>`);\r\n                                                } else {\r\n                                                    childValueSpan.innerHTML = `\"${childValue}\"`;\r\n                                                }\r\n                                            } else {\r\n                                                if (/^https?:\\/\\//.test(childValue)) {\r\n                                                    childValueSpan.innerHTML =\r\n                                                        DOMPurify.sanitize(`<a href=\"${ childValue }\">\"${ childValue }\"</a>`);\r\n                                                } else {\r\n                                                    childValueSpan.textContent = `\"${childValue}\"`;\r\n                                                }\r\n                                            }\r\n                                            childValueSpan.className = \"type-string\";\r\n                                        }\r\n                                        if (j !== 0) {\r\n                                            newDiv.innerHTML += ', ';\r\n                                        }\r\n                                        newDiv.appendChild(childValueSpan);\r\n                                    }\r\n                                    newDiv.innerHTML += ']';\r\n                                    newListItem.appendChild(newDiv);\r\n                                    newListItem.appendChild(newList);\r\n                                    listItem.appendChild(newListItem);\r\n                                } else {\r\n                                    newDiv.innerHTML = keySpan.outerHTML + ': []';\r\n                                    newListItem.appendChild(newDiv);\r\n                                    newListItem.appendChild(newList);\r\n                                    listItem.appendChild(newListItem);\r\n                                    recurse(value, newList);\r\n                                }\r\n                            } else {\r\n                                if (\r\n                                    jsonMap.implicitMaps !== undefined\r\n                                    && jsonMap.implicitMaps.indexOf(key) > -1\r\n                                ) {\r\n                                    newDiv.innerHTML = keySpan.outerHTML;\r\n                                } else {\r\n                                    newDiv.innerHTML = keySpan.outerHTML + ': {}';\r\n                                }\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                listItem.appendChild(newListItem);\r\n                                recurse(value, newList);\r\n                            }\r\n                        } else {\r\n                            jsonItemIndex++;\r\n                            newDiv.innerHTML = keySpan.outerHTML + ': ';\r\n                            let valueSpan = document.createElement('span');\r\n                            let childText = value;\r\n                            if (childText === true) {\r\n                                valueSpan.textContent = \"true\";\r\n                                valueSpan.className = \"type-boolean\";\r\n                            } else if (childText === false) {\r\n                                valueSpan.textContent = \"false\";\r\n                                valueSpan.className = \"type-boolean\";\r\n                            } else if (childText === null) {\r\n                                valueSpan.textContent = \"null\";\r\n                                valueSpan.className = \"type-null\";\r\n                            } else if (\r\n                                Number.isFinite(childText)\r\n                                && !Number.isNaN(childText)\r\n                            ) {\r\n                                valueSpan.textContent = childText + \"\";\r\n                                valueSpan.className = \"type-number\";\r\n                            } else {\r\n                                if (safeHTML) {\r\n                                    if (/^https?:\\/\\//.test(childText)) {\r\n                                        valueSpan.innerHTML =\r\n                                            DOMPurify.sanitize(`<a href=\"${ childText }\">\"${ childText }\"</a>`);\r\n                                    } else {\r\n                                        valueSpan.innerHTML = `\"${childText}\"`;\r\n                                    }\r\n                                } else {\r\n                                    if (/^https?:\\/\\//.test(childText)) {\r\n                                        valueSpan.innerHTML =\r\n                                            DOMPurify.sanitize(`<a href=\"${ childText }\">\"${ childText }\"</a>`);\r\n                                    } else {\r\n                                        valueSpan.textContent = `\"${childText}\"`;\r\n                                    }\r\n                                }\r\n                                valueSpan.className = \"type-string\";\r\n                            }\r\n                            if (\r\n                                jsonMap.implicitNulls === undefined\r\n                                || jsonMap.implicitNulls.indexOf(key) == -1\r\n                            ) {\r\n                                newDiv.appendChild(valueSpan);\r\n                            } else {\r\n                                newDiv.innerHTML = newDiv.innerHTML.slice(0, -2);\r\n                            }\r\n                            newListItem.appendChild(newDiv);\r\n                            listItem.appendChild(newListItem);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                for (var i = 0, c = jsonMap.length; i < c; i++) {\r\n                    let newList = document.createElement('ul'),\r\n                        newDiv = document.createElement('code'),\r\n                        newListItem = document.createElement('li');\r\n                    if (\r\n                        typeof jsonMap[i] === 'object'\r\n                        && jsonMap[i] !== null\r\n                    ) {\r\n                        if (Array.isArray(jsonMap[i])) {\r\n                            if (\r\n                                jsonMap.damonInlineArrays !== undefined\r\n                                && jsonMap.damonInlineArrays.indexOf(i) > -1\r\n                            ) {\r\n                                newDiv.innerHTML += '[';\r\n                                for (let j = 0, k = jsonMap[i].length; j < k; j++) {\r\n                                    let valueSpan = document.createElement('span'),\r\n                                        value = jsonMap[i][j];\r\n                                    if (value === true) {\r\n                                        valueSpan.textContent = \"true\";\r\n                                        valueSpan.className = \"type-boolean\";\r\n                                    } else if (value === false) {\r\n                                        valueSpan.textContent = \"false\";\r\n                                        valueSpan.className = \"type-boolean\";\r\n                                    } else if (value === null) {\r\n                                        valueSpan.textContent = \"null\";\r\n                                        valueSpan.className = \"type-null\";\r\n                                    } else if (\r\n                                        Number.isFinite(value)\r\n                                        && !Number.isNaN(value)\r\n                                    ) {\r\n                                        valueSpan.textContent = value + \"\";\r\n                                        valueSpan.className = \"type-number\";\r\n                                    } else {\r\n                                        if (safeHTML) {\r\n                                            if (/^https?:\\/\\//.test(value)) {\r\n                                                valueSpan.innerHTML =\r\n                                                    DOMPurify.sanitize(`<a href=\"${ value }\">\"${ value }\"</a>`);\r\n                                            } else {\r\n                                                valueSpan.innerHTML = `\"${value}\"`;\r\n                                            }\r\n                                        } else {\r\n                                            if (/^https?:\\/\\//.test(value)) {\r\n                                                valueSpan.innerHTML =\r\n                                                    DOMPurify.sanitize(`<a href=\"${ value }\">\"${ value }\"</a>`);\r\n                                            } else {\r\n                                                valueSpan.textContent = `\"${value}\"`;\r\n                                            }\r\n                                        }\r\n                                        valueSpan.className = \"type-string\";\r\n                                    }\r\n                                    if (j !== 0) {\r\n                                        newDiv.innerHTML += ', ';\r\n                                    }\r\n                                    newDiv.appendChild(valueSpan);\r\n                                }\r\n                                newDiv.innerHTML += ']';\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                listItem.appendChild(newListItem);\r\n                            } else {\r\n                                newDiv.textContent = \"[]\";\r\n                                newListItem.appendChild(newDiv);\r\n                                newListItem.appendChild(newList);\r\n                                listItem.appendChild(newListItem);\r\n                                recurse(jsonMap[i], newList);\r\n                            }\r\n                        } else {\r\n                            newDiv.textContent = \"{}\";\r\n                            newListItem.appendChild(newDiv);\r\n                            newListItem.appendChild(newList);\r\n                            listItem.appendChild(newListItem);\r\n                            recurse(jsonMap[i], newList);\r\n                        }\r\n                    } else {\r\n                        jsonItemIndex++;\r\n                        let childText = jsonMap[i];\r\n                        if (childText === true) {\r\n                            newDiv.textContent = \"true\";\r\n                            newDiv.className = \"type-boolean\";\r\n                        } else if (childText === false) {\r\n                            newDiv.textContent = \"false\";\r\n                            newDiv.className = \"type-boolean\";\r\n                        } else if (childText === null) {\r\n                            newDiv.textContent = \"null\";\r\n                            newDiv.className = \"type-null\";\r\n                        } else if (\r\n                            Number.isFinite(childText)\r\n                            && !Number.isNaN(childText)\r\n                        ) {\r\n                            newDiv.textContent = childText + \"\";\r\n                            newDiv.className = \"type-number\";\r\n                        } else {\r\n                            if (safeHTML) {\r\n                                if (/^https?:\\/\\//.test(childText)) {\r\n                                    newDiv.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childText }\">\"${ childText }\"</a>`);\r\n                                } else {\r\n                                    newDiv.innerHTML = `\"${childText}\"`;\r\n                                }\r\n                            } else {\r\n                                if (/^https?:\\/\\//.test(childText)) {\r\n                                    newDiv.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childText }\">\"${ childText }\"</a>`);\r\n                                } else {\r\n                                    newDiv.textContent = `\"${childText}\"`;\r\n                                }\r\n                            }\r\n                            newDiv.className = \"type-string\";\r\n                        }\r\n                        newListItem.appendChild(newDiv);\r\n                        newListItem.appendChild(newList);\r\n                        listItem.appendChild(newListItem);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {map|array} jsonMap\r\n     * @param {boolean} [safeHTML=false]\r\n     * @returns {object} DOM\r\n     */\r\n    mapToHtmlTable(jsonMap, safeHTML = false) {\r\n        let $ = this;\r\n        // Parsing check\r\n        try {\r\n            $.parentContext.mapToJSON(jsonMap);\r\n        } catch (error) {\r\n            throw new Error(\"Provided map value doesn't passes JSON.parse()\")\r\n        }\r\n        var jsonItemIndex = 0,\r\n            table = document.createElement('table'),\r\n            tHead = document.createElement('thead'),\r\n            tBody = document.createElement('tbody'),\r\n            headingsEncountered = false,\r\n            columnsLength = 0;\r\n        table.className = 'DAMON-Table';\r\n        if (\r\n            typeof jsonMap !== 'object'\r\n            || jsonMap == null\r\n            || Array.isArray(jsonMap)\r\n            || !(jsonMap instanceof Map)\r\n            || jsonMap.constructor !== Map\r\n        ) {\r\n            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n        }\r\n        for (const [key, value] of jsonMap) {\r\n            if (\r\n                typeof value === 'object'\r\n                && value !== null\r\n                && !Array.isArray(value)\r\n                && value instanceof Map\r\n                && value.constructor === Map\r\n            ) {\r\n                if (\r\n                    key == \"0\"\r\n                    && !headingsEncountered\r\n                ) {\r\n                    let row = document.createElement('tr');\r\n                    columnsLength = value.length;\r\n\r\n                    for (const [childKey, childValue] of value) {\r\n                        if (childValue === null) {\r\n                            let headerCell = document.createElement('th');\r\n                            if (safeHTML) {\r\n                                if (/^https?:\\/\\//.test(childKey)) {\r\n                                    headerCell.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childKey }\">${ childKey }</a>`);\r\n                                } else {\r\n                                    headerCell.innerHTML = `${childKey}`;\r\n                                }\r\n                            } else {\r\n                                if (/^https?:\\/\\//.test(childKey)) {\r\n                                    headerCell.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childKey }\">${ childKey }</a>`);\r\n                                } else {\r\n                                    headerCell.textContent = `${childKey}`;\r\n                                }\r\n                            }\r\n                            row.appendChild(headerCell);\r\n                        } else {\r\n                            throw new Error(\"Expected implicit null property, saw otherwise\");\r\n                        }\r\n                    }\r\n                    tHead.appendChild(row);\r\n                    headingsEncountered = true;\r\n                } else {\r\n                    if (columnsLength == 0)\r\n                        columnsLength = value.length;\r\n                    if (value.length != columnsLength) {\r\n                        // unmatching columns length\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                    let row = document.createElement('tr');\r\n                    for (const [childKey, childValue] of value) {\r\n                        if (childValue === null) {\r\n                            let dataCell = document.createElement('td');\r\n                            if (safeHTML) {\r\n                                if (/^https?:\\/\\//.test(childKey)) {\r\n                                    dataCell.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childKey }\">${ childKey }</a>`);\r\n                                } else {\r\n                                    dataCell.innerHTML = `${childKey}`;\r\n                                }\r\n                            } else {\r\n                                if (/^https?:\\/\\//.test(childKey)) {\r\n                                    dataCell.innerHTML =\r\n                                        DOMPurify.sanitize(`<a href=\"${ childKey }\">${ childKey }</a>`);\r\n                                } else {\r\n                                    dataCell.textContent = `${childKey}`;\r\n                                }\r\n                            }\r\n                            row.appendChild(dataCell);\r\n                        } else {\r\n                            throw new Error(\"Expected implicit null property, saw otherwise\");\r\n                        }\r\n                    }\r\n                    tBody.appendChild(row);\r\n                }\r\n            } else if (\r\n                typeof value !== 'object'\r\n                && key == \"00\"\r\n            ) {\r\n                let caption = document.createElement('caption');\r\n                if (safeHTML) {\r\n                    caption.innerHTML = value;\r\n                } else {\r\n                    caption.textContent = value;\r\n                }\r\n                table.appendChild(caption);\r\n            } else {\r\n                throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n            }\r\n            jsonItemIndex++;\r\n        }\r\n        if (headingsEncountered) {\r\n            table.appendChild(tHead);\r\n        }\r\n        table.appendChild(tBody);\r\n        return table;\r\n    }\r\n\r\n    // Expects a complete tree (all terminal leaves at the same level)\r\n    /**\r\n     * @param {map|array} jsonMap\r\n     * @param {boolean} [safeHTML=false]\r\n     * @returns {object} DOM\r\n     */\r\n    mapTreeLeavesToHtmlTable(jsonMap, safeHTML = false) {\r\n        let $ = this;\r\n        // Parsing check\r\n        try {\r\n            $.parentContext.mapToJSON(jsonMap);\r\n        } catch (error) {\r\n            throw new Error(\"Provided map value doesn't passes JSON.parse()\")\r\n        }\r\n        var jsonItemIndex = 0,\r\n            expectedDepth = 0,\r\n            table = document.createElement('table'),\r\n            tHead = document.createElement('thead'),\r\n            tBody = document.createElement('tbody'),\r\n            headingsEncountered = false;\r\n        table.className = 'DAMON-LeavesToTable';\r\n        if (\r\n            typeof jsonMap !== 'object'\r\n            || jsonMap == null\r\n            || Array.isArray(jsonMap)\r\n            || !(jsonMap instanceof Map)\r\n            || jsonMap.constructor !== Map\r\n        ) {\r\n            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n        }\r\n        for (const [key, value] of jsonMap) {\r\n            if (\r\n                typeof value === 'object'\r\n                && !Array.isArray(value)\r\n            ) {\r\n                if (\r\n                    key == \"head\"\r\n                    && !headingsEncountered\r\n                ) {\r\n                    try {\r\n                        recurse(value, tHead);\r\n                    } catch (e) {\r\n                        return;\r\n                    }\r\n                    headingsEncountered = true;\r\n                } else if (\r\n                    key == \"body\"\r\n                ) {\r\n                    try {\r\n                        recurse(value, tBody);\r\n                    } catch (e) {\r\n                        return;\r\n                    }\r\n                }\r\n            } else if (\r\n                typeof value !== 'object'\r\n                && key == \"caption\"\r\n            ) {\r\n                let caption = document.createElement('caption');\r\n                if (safeHTML) {\r\n                    caption.innerHTML = value;\r\n                } else {\r\n                    caption.textContent = value;\r\n                }\r\n                table.appendChild(caption);\r\n            } else {\r\n                throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n            }\r\n            jsonItemIndex++;\r\n        }\r\n        if (headingsEncountered) {\r\n            table.appendChild(tHead);\r\n        }\r\n        table.appendChild(tBody);\r\n        return table;\r\n        /**\r\n         * @param {map|array} jsonMap\r\n         * @param {object} tableSubContainer\r\n         * @param {number} [level=0]\r\n         * @param {array} [line=[]]\r\n         */\r\n        function recurse(jsonMap, tableSubContainer, level = 0, line = []) {\r\n            if (\r\n                typeof tableSubContainer !== 'object'\r\n                || tableSubContainer == null\r\n            ) {\r\n                throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n            }\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                if (tableSubContainer.tagName == \"THEAD\") {\r\n                    if (Array.from(jsonMap.keys()).length == 1) {\r\n                        if (\r\n                            typeof jsonMap.get(Array.from(jsonMap.keys())[0]) === 'object'\r\n                            && jsonMap.get(Array.from(jsonMap.keys())[0]) !== null\r\n                        ) {\r\n                            jsonItemIndex++;\r\n                            recurse(\r\n                                jsonMap.get(Array.from(jsonMap.keys())[0]),\r\n                                tableSubContainer,\r\n                                level + 1,\r\n                                line.concat([Array.from(jsonMap.keys())[0]])\r\n                            );\r\n                        } else {\r\n                            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                        }\r\n                    } else {\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                } else if (\r\n                    tableSubContainer.tagName == \"TBODY\"\r\n                ) {\r\n                    if (Array.from(jsonMap.keys()).length == 0) {\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                    for (const [key, value] of jsonMap) {\r\n                        if (\r\n                            typeof value === 'object'\r\n                            && value !== null\r\n                        ) {\r\n                            jsonItemIndex++;\r\n                            recurse(value, tableSubContainer, level + 1, line.concat([key]));\r\n                        } else {\r\n                            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                        }\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                if (tableSubContainer.tagName == \"THEAD\") {\r\n                    if (jsonMap.length == 1) {\r\n                        jsonItemIndex++;\r\n                        expectedDepth = level;\r\n                        let tableRow = document.createElement('tr');\r\n                        line.push(jsonMap[0]);\r\n                        for (let i = 0, c = line.length; i < c; i++) {\r\n                            let headerCell = document.createElement('th');\r\n                            if (safeHTML) {\r\n                                headerCell.innerHTML = line[i];\r\n                            } else {\r\n                                headerCell.textContent = line[i];\r\n                            }\r\n                            tableRow.appendChild(headerCell);\r\n                        }\r\n                        tableSubContainer.appendChild(tableRow);\r\n                    } else {\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                } else if (\r\n                    tableSubContainer.tagName == \"TBODY\"\r\n                ) {\r\n                    if (\r\n                        level == expectedDepth\r\n                    ) {\r\n                        if (jsonMap.length == 0) {\r\n                            throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                        }\r\n                        for (let i = 0, c = jsonMap.length; i < c; i++) {\r\n                            jsonItemIndex++;\r\n                            let tableRow = document.createElement('tr');\r\n                            for (let z = 0, x = line.length; z < x; z++) {\r\n                                let dataCell = document.createElement('td');\r\n                                if (safeHTML) {\r\n                                    dataCell.innerHTML = line[z];\r\n                                } else {\r\n                                    dataCell.textContent = line[z];\r\n                                }\r\n                                tableRow.appendChild(dataCell);\r\n                            }\r\n                            let dataCell = document.createElement('td');\r\n                            if (safeHTML) {\r\n                                dataCell.innerHTML = jsonMap[i];\r\n                            } else {\r\n                                dataCell.textContent = jsonMap[i];\r\n                            }\r\n                            dataCell.textContent = jsonMap[i];\r\n                            tableRow.appendChild(dataCell);\r\n                            tableSubContainer.appendChild(tableRow);\r\n                        }\r\n                    } else {\r\n                        throw new Error(\"Error List Item number \" + jsonItemIndex + \": @param { {} } list\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {object} list DOM\r\n     * @return {map|array}\r\n     */\r\n    htmlToJSON(list) {\r\n        let $ = this;\r\n        var listItemIndex = 0;\r\n        if (list.firstElementChild.textContent == '{}') {\r\n            return $._mapToJSON(recurse(tree, new Map()));\r\n        } else if (list.firstElementChild.textContent == '[]') {\r\n            return $._mapToJSON(recurse(tree, []));\r\n        }\r\n        /**\r\n         * @param {object} list DOM\r\n         * @param {map|array} jsonMap\r\n         * @returns {map|array}\r\n         */\r\n        function recurse(list, jsonMap) {\r\n            if (\r\n                typeof list !== 'object'\r\n                || list == null\r\n                || Array.isArray(list)\r\n            ) {\r\n                throw new Error(\"Error List Item number \" + listItemIndex + \": @param { {} } list\");\r\n            }\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                // {}\r\n                for (let i = 0, c = list.children.length; i < c; i++) {\r\n                    listItemIndex++;\r\n                    if (list.children[i].tagName == \"LI\") {\r\n                        if (list.children[i].firstElementChild.tagName == \"CODE\") {\r\n                            if (list.children[i].firstElementChild.innerHTML.length) {\r\n                                let text = list.children[i].firstElementChild.innerHTML.trim();\r\n                                if (\r\n                                    text[text.length - 1] == \":\"\r\n                                    && text.length > 1\r\n                                ) {\r\n                                    let secondGrandChild = list.children[i].children[1];\r\n                                    if (\r\n                                        secondGrandChild.tagName == \"UL\"\r\n                                        && secondGrandChild.firstElementChild.tagName == \"LI\"\r\n                                        && secondGrandChild.children.length == 1\r\n                                        && secondGrandChild.firstElementChild.firstElementChild.tagName == \"CODE\"\r\n                                    ) {\r\n                                        listItemIndex++;\r\n                                        let childText =\r\n                                            secondGrandChild.firstElementChild.firstElementChild.textContent.trim();\r\n                                        if (childText == \"true\") {\r\n                                            jsonMap.set(text.slice(0, -1), true);\r\n                                        } else if (childText == \"false\") {\r\n                                            jsonMap.set(text.slice(0, -1), false);\r\n                                        } else if (childText == \"null\") {\r\n                                            jsonMap.set(text.slice(0, -1), null);\r\n                                        } else if (\r\n                                            isFinite(childText)\r\n                                            && !isNaN(parseFloat(childText))\r\n                                        ) {\r\n                                            jsonMap.set(text.slice(0, -1), childText * 1);\r\n                                        } else {\r\n                                            jsonMap.set(text.slice(0, -1), childText);\r\n                                        }\r\n                                    } else {\r\n                                        throw new Error(\r\n                                            \"Error List Item number \"\r\n                                            + listItemIndex\r\n                                            + \": not DAMON-compliant.\"\r\n                                        );\r\n                                    }\r\n                                } else if (\r\n                                    text[text.length - 4] == \":\"\r\n                                    && text.length > 4\r\n                                ) {\r\n                                    if (text.slice(-3) == \" []\") {\r\n                                        jsonMap.set(text.slice(0, -4), []);\r\n                                        if (list.children[i].children[1].tagName == \"UL\") {\r\n                                            recurse(list.children[i].children[1], jsonMap.get(text.slice(0, -4)));\r\n                                        } else {\r\n                                            throw new Error(\r\n                                                \"Error List Item number \"\r\n                                                + listItemIndex\r\n                                                + \": not DAMON-compliant.\"\r\n                                            );\r\n                                        }\r\n                                    } else if (text.slice(-3) == \" {}\") {\r\n                                        jsonMap.set(text.slice(0, -4), new Map());\r\n                                        if (list.children[i].children[1].tagName == \"UL\") {\r\n                                            recurse(list.children[i].children[1], jsonMap.get(text.slice(0, -4)));\r\n                                        } else {\r\n                                            throw new Error(\r\n                                                \"Error List Item number \"\r\n                                                + listItemIndex\r\n                                                + \": not DAMON-compliant.\"\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    throw new Error(\r\n                                        \"Error List Item number \"\r\n                                        + listItemIndex\r\n                                        + \": map items need a key\"\r\n                                    );\r\n                                }\r\n                            } else {\r\n                                throw new Error(\"Error List Item number \" + listItemIndex + \": empty node.\");\r\n                            }\r\n                        } else {\r\n                            throw new Error(\"Error List Item number \" + listItemIndex + \": not DAMON-compliant.\");\r\n                        }\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                // []\r\n                for (let i = 0, c = list.children.length; i < c; i++) {\r\n                    listItemIndex++;\r\n                    if (list.children[i].tagName == \"LI\") {\r\n                        if (list.children[i].firstElementChild.tagName == \"CODE\") {\r\n                            if (list.children[i].firstElementChild.innerHTML.length) {\r\n                                let text = list.children[i].firstElementChild.innerHTML.trim();\r\n                                if (\r\n                                    text[text.length - 1] == \":\"\r\n                                    && text.length > 1\r\n                                ) {\r\n                                    throw new Error(\r\n                                        \"Error List Item number \"\r\n                                        + listItemIndex\r\n                                        + \": lists can't have keys.\"\r\n                                    );\r\n                                } else if (\r\n                                    text[text.length - 4] == \":\"\r\n                                    && text.length > 4\r\n                                ) {\r\n                                    throw new Error(\r\n                                        \"Error List Item number \"\r\n                                        + listItemIndex\r\n                                        + \": not DAMON-compliant.\"\r\n                                    );\r\n                                } else {\r\n                                    if (text == \"[]\") {\r\n                                        jsonMap.push([]);\r\n                                        if (\r\n                                            list.children[i].children[1]\r\n                                            && list.children[i].children[1].tagName == \"UL\"\r\n                                        ) {\r\n                                            recurse(list.children[i].children[1], jsonMap[jsonMap.length - 1]);\r\n                                        } else {\r\n                                            throw new Error(\r\n                                                \"Error List Item number \"\r\n                                                + listItemIndex\r\n                                                + \": not DAMON-compliant.\"\r\n                                            );\r\n                                        }\r\n                                    } else if (text == \"{}\") {\r\n                                        jsonMap.push({});\r\n                                        if (\r\n                                            list.children[i].children[1]\r\n                                            && list.children[i].children[1].tagName == \"UL\"\r\n                                        ) {\r\n                                            recurse(list.children[i].children[1], jsonMap[jsonMap.length - 1]);\r\n                                        } else {\r\n                                            throw new Error(\r\n                                                \"Error List Item number \"\r\n                                                + listItemIndex\r\n                                                + \": not DAMON-compliant.\"\r\n                                            );\r\n                                        }\r\n                                    } else if (text == \"true\") {\r\n                                        jsonMap.push(true);\r\n                                    } else if (text == \"false\") {\r\n                                        jsonMap.push(false);\r\n                                    } else if (text == \"null\") {\r\n                                        jsonMap.push(null);\r\n                                    } else if (\r\n                                        isFinite(text)\r\n                                        && !isNaN(parseFloat(text))\r\n                                    ) {\r\n                                        jsonMap.push(text * 1);\r\n                                    } else {\r\n                                        jsonMap.push(text);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                throw new Error(\"Error List Item number \" + listItemIndex + \": empty node.\");\r\n                            }\r\n                        } else {\r\n                            throw new Error(\"Error List Item number \" + listItemIndex + \": not DAMON-compliant.\");\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error(\"Error List Item number \" + listItemIndex + \": @param { {} | [] } jsonMap\");\r\n            }\r\n            return jsonMap;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {map|array} firstMap\r\n     * @param {map|array} secondMap\r\n    */\r\n    mapsDiff(firstMap, secondMap) {\r\n        let $ = this;\r\n        // Parsing check\r\n        try {\r\n            $.parentContext.mapToJSON(firstMap);\r\n            $.parentContext.mapToJSON(secondMap);\r\n        } catch (error) {\r\n            throw new Error(\"Provided map value doesn't passes JSON.parse()\")\r\n        }\r\n        if (typeof firstMap !== typeof secondMap) {\r\n\r\n        }\r\n        // Intersection, Substraction, Addition\r\n        var list = ``;\r\n        if (Array.isArray(jsonMap)) {\r\n            list += '- []\\n';\r\n        } else {\r\n            list += '- {}\\n';\r\n        }\r\n        _recurse(jsonMap);\r\n        return list.slice(0, -1); // last linefeed\r\n        /**\r\n         * @param {map|array} jsonMap\r\n         * @param {number} [level=1]\r\n         * @returns {string}\r\n         */\r\n        function _recurse(jsonMap, level = 1) {\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                for (const [key, value] of jsonMap) {\r\n                    if (\r\n                        typeof value === 'object'\r\n                        && value !== null\r\n                    ) {\r\n                        if (Array.isArray(value)) {\r\n                            let nullsCounter = 0,\r\n                                arrayOfPrimitives = value.filter(function (item) {\r\n                                if (item === true) {\r\n                                    return true;\r\n                                } else if (item === false) {\r\n                                    return true;\r\n                                } else if (item === null) {\r\n                                    nullsCounter++;\r\n                                    return true;\r\n                                } else if (typeof item == 'string') {\r\n                                    return true;\r\n                                } else if (\r\n                                    isFinite(item)\r\n                                    && !isNaN(parseFloat(item))\r\n                                    && Number.isFinite(item * 1)\r\n                        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                                    && !Number.isNaN(item * 1)\r\n                                ) { // Number\r\n                                    return true;\r\n                                } else {\r\n                                    return false;\r\n                                }\r\n                            });\r\n                            if (\r\n                                value.length == arrayOfPrimitives.length\r\n                                && (level * 4 + 2 + value.join(', ').length + (nullsCounter * 4)) <= 80\r\n                            ) {\r\n                                // No nesting, fits on an archivable line\r\n                                let line = '[' + value.map((x) => JSON.stringify(x)).join(', ') + ']';\r\n                                list +=\r\n                                    '    '.repeat(level)\r\n                                    + '- ' + JSON.stringify(key).slice(1, -1) + ': ' + line + '\\n';\r\n                            } else {\r\n                                list += '    '.repeat(level) + '- ' + JSON.stringify(key).slice(1, -1) + ': []\\n';\r\n                                _recurse(value, level + 1);\r\n                            }\r\n                        } else {\r\n                            list += '    '.repeat(level) + '- ' + JSON.stringify(key).slice(1, -1) + ': {}\\n';\r\n                            _recurse(value, level + 1);\r\n                        }\r\n                    } else {\r\n                        list += '    '.repeat(level) + '- ' + JSON.stringify(key).slice(1, -1) + ': ';\r\n                        if (value === true) {\r\n                            list += \"true\\n\";\r\n                        } else if (value === false) {\r\n                            list += \"false\\n\";\r\n                        } else if (value === null) {\r\n                            list += \"null\\n\";\r\n                        } else if (\r\n                            Number.isFinite(value)\r\n                            && !Number.isNaN(value)\r\n                        ) {\r\n                            list += value + \"\\n\";\r\n                        } else {\r\n                            list += `${JSON.stringify(value)}\\n`;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                for (var i = 0, c = jsonMap.length; i < c; i++) {\r\n                    if (\r\n                        typeof jsonMap[i] === 'object'\r\n                        && jsonMap[i] !== null\r\n                    ) {\r\n                        if (Array.isArray(jsonMap[i])) {\r\n                            let nullsCounter = 0,\r\n                                arrayOfPrimitives = jsonMap[i].filter(function (item) {\r\n                                if (item === true) {\r\n                                    return true;\r\n                                } else if (item === false) {\r\n                                    return true;\r\n                                } else if (item === null) {\r\n                                    nullsCounter++;\r\n                                    return true;\r\n                                } else if (typeof item == 'string') {\r\n                                    return true;\r\n                                } else if (\r\n                                    isFinite(item)\r\n                                    && !isNaN(parseFloat(item))\r\n                                    && Number.isFinite(item * 1)\r\n                        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                                    && !Number.isNaN(item * 1)\r\n                                ) { // Number\r\n                                    return true;\r\n                                } else {\r\n                                    return false;\r\n                                }\r\n                            });\r\n                            if (\r\n                                jsonMap[i].length == arrayOfPrimitives.length\r\n                                && (level * 4 + 2 + jsonMap[i].join(', ').length + (nullsCounter * 4)) <= 80\r\n                            ) {\r\n                                let line = '[' + jsonMap[i].map((x) => JSON.stringify(x)).join(', ') + ']';\r\n                                list += '    '.repeat(level) + '- ' + line + '\\n';\r\n                            } else {\r\n                                list += '    '.repeat(level) + \"- []\\n\";\r\n                                _recurse(jsonMap[i], level + 1);\r\n                            }\r\n                        } else {\r\n                            list += '    '.repeat(level) + \"- {}\\n\";\r\n                            _recurse(jsonMap[i], level + 1);\r\n                        }\r\n                    } else {\r\n                        if (jsonMap[i] === true) {\r\n                            list += '    '.repeat(level) + \"- true\\n\";\r\n                        } else if (jsonMap[i] === false) {\r\n                            list += '    '.repeat(level) + \"- false\\n\";\r\n                        } else if (jsonMap[i] === null) {\r\n                            list += '    '.repeat(level) + \"- null\\n\";\r\n                        } else if (\r\n                            Number.isFinite(jsonMap[i])\r\n                            && !Number.isNaN(jsonMap[i])\r\n                        ) {\r\n                            list += '    '.repeat(level) + '- ' + jsonMap[i] + \"\\n\";\r\n                        } else {\r\n                            list += '    '.repeat(level) + `- ${JSON.stringify(jsonMap[i])}\\n`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n };\r\n", "// Copyright \u00A9 2024 Adrian Turcev\r\nconst parse = require('json-in-order').parse;\r\nconst DamonUtils = require('./src/Utils.js');\r\n\r\n//# Damon\r\nmodule.exports =\r\nclass Damon {\r\n    /**\r\n     *Creates an instance of Damon.\r\n     * @param {Boolean} pedantic\r\n     */\r\n    constructor(pedantic = false) {\r\n        let $ = this;\r\n        this.indentation = 4;\r\n        if ([true, false, undefined].indexOf(pedantic) == -1) {\r\n            throw new Error(\"@param {Boolean} pedantic\");\r\n        }\r\n        this.pedantic = pedantic;\r\n        this.utils = new DamonUtils(this);\r\n    }\r\n    /**\r\n     * Object-like ordered dictionaries declarations in js\r\n     * @param {TemplateStringsArray} strings\r\n     * @returns {Map<string, any>|Array<any>|boolean|null|string|number}\r\n     */\r\n    template(strings) {\r\n        let $ = this;\r\n        var result = strings.raw[0];\r\n        for (let i = 1; i < strings.raw.length; i++) {\r\n            if (typeof arguments[i] == 'string') {\r\n                result += '\\\"' + arguments[i] + '\\\"';\r\n            } else {\r\n                result += arguments[i];\r\n            }\r\n            result += strings.raw[i];\r\n        }\r\n        let map = $._treeToMap($._damonToTree(result));\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * @param {string} damon\r\n     * @returns {Map<string, any>|Array<any>|boolean|null|string|number}\r\n     */\r\n    damonToMap(damon) {\r\n        let $ = this;\r\n        let treeOrPrimitive = $._damonToTree(damon);\r\n        if (\r\n            treeOrPrimitive === true\r\n            || treeOrPrimitive === false\r\n            || treeOrPrimitive === null\r\n            || typeof treeOrPrimitive === 'string'\r\n            || typeof treeOrPrimitive === 'number'\r\n        ) {\r\n            return treeOrPrimitive;\r\n        }\r\n        return $._treeToMap($._damonToTree(damon));\r\n    }\r\n\r\n    /**\r\n     * @param {string} damon\r\n     * @returns {string}\r\n     */\r\n    damonToJSON(damon) {\r\n        let $ = this;\r\n        return $.mapToJSON($.damonToMap(damon));\r\n    }\r\n\r\n    /**\r\n     * @param {string} damon\r\n     * @returns {string}\r\n     */\r\n    damonToSExpression(damon) {\r\n        let $ = this;\r\n        return $.implicitMapToSExpression($.damonToMap(damon));\r\n    }\r\n\r\n    /**\r\n     * @param {string} json\r\n     * @returns {string}\r\n     */\r\n    jsonToDamon(json) {\r\n        let $ = this;\r\n        return $.mapToDamon($.jsonToMap(json), false);\r\n    }\r\n\r\n    /**\r\n     * @param {string} json\r\n     * @returns {Map<string, any>|Array<any>|boolean|null|string|number}\r\n     */\r\n    jsonToMap(json) {\r\n        let $ = this;\r\n        var jsonLines = $._getLines(json);\r\n        // - Remove comments lines\r\n        jsonLines = jsonLines.filter(x => !(/^ *\\/\\//.test(x)));\r\n        // - Remove empty lines\r\n        jsonLines = jsonLines.filter(x => x != '');\r\n        // - Remove lines containing only indentation\r\n        jsonLines = jsonLines.filter(x => !/^[ \\t]+$/.test(x));\r\n        if (jsonLines.length == 1) {\r\n            if ([\"true\", \"false\", \"null\"].indexOf(jsonLines[0].trim()) > -1) {\r\n                return JSON.parse(jsonLines[0]);\r\n            } else if (/^\".*\"$/.test(jsonLines[0].trim())) {\r\n                try {\r\n                    return JSON.parse(jsonLines[0].trim());\r\n                } catch (error) {\r\n                    console.error(\"Error line number 1: not JSON-compliant, detailed error follows\");\r\n                    error.line = 1;\r\n                    error.language = \"JSON\";\r\n                    error.type = \"string\";\r\n                    throw error;\r\n                }\r\n            } else if (\r\n                isFinite(jsonLines[0])\r\n                && !isNaN(parseFloat(jsonLines[0]))\r\n                && Number.isFinite(jsonLines[0] * 1)\r\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                && !Number.isNaN(jsonLines[0] * 1)\r\n            ) {\r\n                if (\r\n                    jsonLines[0].indexOf(0) == 0\r\n                    && jsonLines[0].length > 1\r\n                    && jsonLines[0].indexOf('.') !== 1\r\n                ) {\r\n                    throw new Error(\r\n                        \"Error line number 1: leading 0\",\r\n                        {\r\n                            line: 1,\r\n                            language: \"DAMON\"\r\n                        }\r\n                    );\r\n                }\r\n                try {\r\n                    return JSON.parse(jsonLines[0] * 1);\r\n                } catch (error) {\r\n                    console.error(\"Error line number 1: not JSON-compliant, detailed error follows\");\r\n                    error.line = 1;\r\n                    error.language = \"JSON\";\r\n                    error.type = \"number\";\r\n                    throw error;\r\n                }\r\n            } else if (jsonLines[0] * 1 === Infinity) {\r\n                // Make JSON.parse throw at Infinity\r\n                try {\r\n                    JSON.parse(jsonLines[0] * 1);\r\n                } catch (error) {\r\n                    console.error(\"Error line number 1: not JSON-compliant, detailed error follows\");\r\n                    error.line = 1;\r\n                    error.language = \"JSON\";\r\n                    error.type = \"infinity\";\r\n                    throw error;\r\n                }\r\n            } else {\r\n                return parse(json);\r\n            }\r\n        } else {\r\n            return parse(json);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {string} damon\r\n     * @returns {Array<string>} damonLines\r\n     */\r\n    _getLines(damon) {\r\n        if (damon === '') {\r\n            throw new Error(\r\n                \"Error line 1: empty string\",\r\n                {\r\n                    line: 1,\r\n                    language: \"DAMON\"\r\n                }\r\n            );\r\n        }\r\n        if (\r\n            /[\\s]/.test(damon)\r\n            && damon.match(new RegExp(/[\\s]/))[0].length == damon.length\r\n        ) {\r\n            throw new Error(\r\n                \"Error line 1: string only contains whitespace\",\r\n                {\r\n                    line: 1,\r\n                    language: \"DAMON\"\r\n                }\r\n            );\r\n        }\r\n        var delimiter = /\\r\\n/.test(damon) ? '\\r\\n' : '\\n',\r\n            damonLines = damon.split(delimiter);\r\n        if (/\\\\*\\n/.test(damon) && delimiter == '\\n') {\r\n            if (/[^\\\\]\\\\(\\\\\\\\)*\\n/.test(damon)) {\r\n                let errorLine = damon.split(/[^\\\\]\\\\(\\\\\\\\)*\\n/)[0].split('\\n').length;\r\n                throw new Error(\r\n                    \"Error line \" + errorLine + \": oddly escaped newline\",\r\n                    {\r\n                        line: errorLine,\r\n                        language: \"DAMON\"\r\n                    }\r\n                );\r\n            }\r\n            let reversedDamon = damon.split('').reverse().join(''),\r\n                reversedDamonLines = reversedDamon.split(/\\n/);\r\n            damonLines = reversedDamonLines.map((x) => x.split('').reverse().join('')).reverse();\r\n        }\r\n        return damonLines;\r\n    }\r\n\r\n    /**\r\n     * Offside-rule parsing\r\n     * @param {string} damon\r\n     * @returns {object|boolean|null|string|number}\r\n     */\r\n    _damonToTree(damon) {\r\n        let $ = this;\r\n        let damonLines = $._getLines(damon),\r\n            damonOriginalLines = damonLines.slice(0);\r\n        // Let the shaving, begin!\r\n        // - Remove comments lines\r\n        damonLines = damonLines.filter(x => !(/^ *\\/\\//.test(x)));\r\n        // - Remove empty lines\r\n        damonLines = damonLines.filter(x => x != '');\r\n        // - Remove lines containing only indentation\r\n        damonLines = damonLines.filter(x => !/^[ \\t]+$/.test(x));\r\n        // Lone non-structural values\r\n        if (damonLines.length == 1) {\r\n            if ([\"true\", \"false\", \"null\"].indexOf(damonLines[0].trim()) > -1) {\r\n                return JSON.parse(damonLines[0]);\r\n            } else if (/^\".*\"$/.test(damonLines[0].trim())) {\r\n                try {\r\n                    return JSON.parse(damonLines[0].trim());\r\n                } catch (error) {\r\n                    console.error(\"Error line number 1: not JSON-compliant, detailed error follows\");\r\n                    error.line = 1;\r\n                    error.language = \"JSON\";\r\n                    error.type = \"string\";\r\n                    throw error;\r\n                }\r\n            } else if (\r\n                isFinite(damonLines[0])\r\n                && !isNaN(parseFloat(damonLines[0]))\r\n                && Number.isFinite(damonLines[0] * 1)\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                && !Number.isNaN(damonLines[0] * 1)\r\n            ) {\r\n                if (\r\n                    damonLines[0].indexOf(0) == 0\r\n                    && damonLines[0].length > 1\r\n                    && damonLines[0].indexOf('.') !== 1\r\n                ) {\r\n                    throw new Error(\r\n                        \"Error line number 1: leading 0\",\r\n                        {\r\n                            line: 1,\r\n                            language: \"DAMON\"\r\n                        }\r\n                    );\r\n                }\r\n                try {\r\n                    return JSON.parse(damonLines[0] * 1);\r\n                } catch (error) {\r\n                    console.error(\"Error line number 1: not JSON-compliant, detailed error follows\");\r\n                    error.line = 1;\r\n                    error.language = \"JSON\";\r\n                    error.type = \"number\";\r\n                    throw error;\r\n                }\r\n            } else if (damonLines[0] * 1 === Infinity) {\r\n                // Make JSON.parse throw at Infinity\r\n                try {\r\n                    JSON.parse(damonLines[0] * 1);\r\n                } catch (error) {\r\n                    console.error(\"Error line number 1: not JSON-compliant, detailed error follows\");\r\n                    error.line = 1;\r\n                    error.language = \"JSON\";\r\n                    error.type = \"infinity\";\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n        // Keep a mapping\r\n        let damonLinesIndex = 0,\r\n            damonOriginalLinesMapping = [];\r\n        for (let i = 0, c = damonOriginalLines.length; i < c; i++) {\r\n            if (damonLines.slice(damonLinesIndex).indexOf(damonOriginalLines[i]) > -1) {\r\n                damonOriginalLinesMapping[i] = damonLines.slice(damonLinesIndex).indexOf(damonOriginalLines[i]);\r\n            } else {\r\n                damonOriginalLinesMapping[i] = null;\r\n            }\r\n        }\r\n        let tabsMatchingRegex = new RegExp('^(\\t)+');\r\n        for (let i = 0, c = damonLines.length; i < c; i++) {\r\n            // - Replacing leading tabs\r\n            if (tabsMatchingRegex.test(damonLines[i])) {\r\n                const tabsPaddingLength = damonLines[i].match(tabsMatchingRegex)[0].length;\r\n                for (let z = 0, x = tabsPaddingLength; z < x; z++) {\r\n                    damonLines[i] = damonLines[i].replace('\t', ' '.repeat($.indentation));\r\n                }\r\n            }\r\n            // Throwing at implicit-nulls trailing whitespaces\r\n            // Necessary to avoid implicit cohersion\r\n            // Simply trimming might partly-erase implicit-keys\r\n            if (\r\n                !/^ *- $/.test(damonLines[i])\r\n                && /[ \\t]+$/.test(damonLines[i])\r\n            ) {\r\n                throw new Error(\r\n                    \"Error line \" + (damonOriginalLinesMapping.indexOf(i) + 1) + \": trailing whitespace\",\r\n                    {\r\n                        line: damonOriginalLinesMapping.indexOf(i) + 1,\r\n                        language: \"DAMON\"\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        // - Try to fix indentation\r\n        let indentationMatchingRegex = new RegExp('^(' + ' '.repeat($.indentation) + ')+');\r\n        if (\r\n            indentationMatchingRegex.test(damonLines[0])\r\n        ) {\r\n            let initialPadding = damonLines[0].match(indentationMatchingRegex)[0].length,\r\n                trimmable = true;\r\n            for (let i = 0, c = damonLines.length; i < c; i++) {\r\n                if (\r\n                    indentationMatchingRegex.test(damonLines[i])\r\n                    && damonLines[i].match(indentationMatchingRegex)[0].length >= initialPadding\r\n                ) {\r\n                    damonLines[i] = damonLines[i].slice(initialPadding);\r\n                } else {\r\n                    trimmable = false;\r\n                }\r\n            }\r\n            if (!trimmable) {\r\n                throw new Error(\r\n                    \"Error line 1: bad formatting\",\r\n                    {\r\n                        line: 1,\r\n                        language: \"DAMON\"\r\n                    }\r\n                );\r\n            }\r\n        } else if (\r\n            indentationMatchingRegex.test(damonLines[1])\r\n            && damonLines[1].match(indentationMatchingRegex)[0].length > $.indentation\r\n        ) {\r\n            let initialPadding = damonLines[1].match(indentationMatchingRegex)[0].length - $.indentation,\r\n                trimmable = true;\r\n            for (let i = 1, c = damonLines.length; i < c; i++) {\r\n                if (\r\n                    indentationMatchingRegex.test(damonLines[i])\r\n                    && damonLines[i].match(indentationMatchingRegex)[0].length >= initialPadding\r\n                ) {\r\n                    damonLines[i] = damonLines[i].slice(initialPadding);\r\n                } else {\r\n                    trimmable = false;\r\n                }\r\n            }\r\n            if (!trimmable) {\r\n                throw new Error(\r\n                    \"Error line 2: bad formatting\",\r\n                    {\r\n                        line: 2,\r\n                        language: \"DAMON\"\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        // - Headless support\r\n        let headless = false;\r\n        if (damonLines.length > 1) {\r\n            for (let i = 0, c = damonLines.length; i < c; i++) {\r\n                if (\r\n                    i !== 0\r\n                    && /^- /.test(damonLines[i])\r\n                ) {\r\n                    headless = true;\r\n                }\r\n            }\r\n        }\r\n        if (\r\n            !/^- \\{\\}$/.test(damonLines[0])\r\n            && !/^- \\[\\]$/.test(damonLines[0])\r\n        ) {\r\n            headless = true;\r\n        }\r\n        if (headless) {\r\n            for (let i = 0, c = damonLines.length; i < c; i++) {\r\n                damonLines[i] = ' '.repeat($.indentation) + damonLines[i];\r\n            }\r\n            damonLines.unshift('- {}');\r\n        }\r\n\r\n        var treeRoot = {\r\n            content: damonLines[0],\r\n            level: 0,\r\n            id: 0,\r\n            children: [],\r\n            headless: headless,\r\n            damonOriginalLinesMapping: damonOriginalLinesMapping\r\n        };\r\n        var previousListItem = treeRoot;\r\n        if (\r\n            !/^- /.test(damonLines[0].trimStart())\r\n            || (\r\n                /^ +/.test(damonLines[0])\r\n                && (\r\n                    damonLines[0].match(/^ +/)[0].length % $.indentation != 0\r\n                    || (\r\n                        damonLines[0].match(/^ +/)[0].length != $.indentation\r\n                    )\r\n                )\r\n            )\r\n        ) {\r\n            throw new Error(\r\n                \"Error line \" + ((headless * 1) + 1) + \": bad formatting\",\r\n                {\r\n                    line: (headless * 1) + 1,\r\n                    language: \"DAMON\"\r\n                }\r\n            );\r\n        }\r\n        damonLines.shift();\r\n        for (let i = 0, c = damonLines.length; i < c; i++) {\r\n            if (\r\n                !/^- /.test(damonLines[i].trimStart())\r\n                || (\r\n                    /^ +/.test(damonLines[i])\r\n                    && (\r\n                        damonLines[i].match(/^ +/)[0].length % $.indentation != 0\r\n                        || (\r\n                            i == 0\r\n                            && damonLines[i].match(/^ +/)[0].length != $.indentation\r\n                        ) || (\r\n                            i != 0\r\n                            && /^- /.test(damonLines[i - 1])\r\n                            && damonLines[i].match(/^ +/)[0].length != $.indentation\r\n                        ) || (\r\n                            i != 0\r\n                            && !/^- /.test(damonLines[i - 1])\r\n                            && (\r\n                                damonLines[i].match(/^ +/)[0].length\r\n                                > (damonLines[i - 1].match(/^ +/)[0].length + $.indentation)\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            ) {\r\n                console.log(damonLines[i]);\r\n                throw new Error(\r\n                    \"Error line \" + (damonOriginalLinesMapping.indexOf(i) + 1) + \": bad formatting\",\r\n                    {\r\n                        line: damonOriginalLinesMapping.indexOf(i) + 1,\r\n                        language: \"DAMON\"\r\n                    }\r\n                );\r\n            }\r\n            /* jshint -W083 */\r\n            let listItem = {\r\n                    content: damonLines[i].trimStart().slice(2),\r\n                    level: 1 + (damonLines[i].match(/^ +/)[0].length / $.indentation),\r\n                    id: '',\r\n                    children: []\r\n                };\r\n            if (previousListItem === treeRoot) {\r\n                listItem.id = treeRoot.children.length + 1;\r\n                treeRoot.children.push(listItem);\r\n            } else if (previousListItem.level === listItem.level) {\r\n                var parentListItem = $._findListItemCommonDirectParent(previousListItem, treeRoot);\r\n                if (parentListItem.level == 0) {\r\n                    listItem.id = parentListItem.children.length + 1;\r\n                } else {\r\n                    listItem.id = parentListItem.id + '-' + (parentListItem.children.length + 1);\r\n                }\r\n                parentListItem.children.push(listItem);\r\n            } else if (previousListItem.level > listItem.level) {\r\n                var commonAncestor = $._findListItemCommonAncestor(previousListItem, treeRoot, listItem.level);\r\n                if (commonAncestor.level == 0) {\r\n                    listItem.id = commonAncestor.children.length + 1;\r\n                } else {\r\n                    listItem.id = commonAncestor.id + '-' + (commonAncestor.children.length + 1);\r\n                }\r\n                commonAncestor.children.push(listItem);\r\n            } else if (previousListItem.level < listItem.level) {\r\n                var grandParentListItem = $._findListItemCommonDirectParent(previousListItem, treeRoot);\r\n                let previousListItemIndex = grandParentListItem.children.indexOf(previousListItem);\r\n                let previousListItemId =\r\n                        grandParentListItem.children[previousListItemIndex].id,\r\n                    nextTitleNumber = grandParentListItem.children[previousListItemIndex].children.length + 1;\r\n                listItem.id = previousListItemId + '-' + nextTitleNumber;\r\n                grandParentListItem.children[previousListItemIndex].children.push(listItem);\r\n            }\r\n            previousListItem = listItem;\r\n        }\r\n        return treeRoot;\r\n    }\r\n\r\n    /**\r\n     * @param {any} listItem\r\n     * @param {{ children: string | any[]; }} possibleParent\r\n     * @return {object|string} DOM\r\n     */\r\n    _findListItemCommonDirectParent(listItem, possibleParent) {\r\n        let $ = this;\r\n        if (possibleParent.children.indexOf(listItem) > -1) {\r\n            return possibleParent;\r\n        } else {\r\n            var parent;\r\n            for (let i = possibleParent.children.length - 1, c = 0; i >= c; i--) {\r\n                parent = $._findListItemCommonDirectParent(listItem, possibleParent.children[i]);\r\n                if (parent) {\r\n                    return parent;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {any} listItem\r\n     * @param {{ children: string | any[]; }} possibleParent\r\n     * @param {number} level\r\n     * @return {object|string} DOM\r\n     */\r\n    _findListItemCommonAncestor(listItem, possibleParent, level) {\r\n        let $ = this;\r\n        var parent = $._findListItemCommonDirectParent(listItem, possibleParent);\r\n        if (parent.level < level) {\r\n            return parent;\r\n        } else {\r\n            return $._findListItemCommonAncestor(parent, possibleParent, level);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * JSON primitives wrapping\r\n     * @param {Object} damonTree\r\n     * @return {Map<string, any> | Array<any>}\r\n     */\r\n    _treeToMap(damonTree) {\r\n        let $ = this;\r\n        var treeItemIndex = 0;\r\n        if (damonTree.content == '- {}') {\r\n            let map = new Map();\r\n            map.damonOriginalLinesMapping = damonTree.damonOriginalLinesMapping;\r\n            return _recurse(damonTree, map);\r\n        } else if (damonTree.content == '- []') {\r\n            let array = [];\r\n            array.damonOriginalLinesMapping = damonTree.damonOriginalLinesMapping;\r\n            return _recurse(damonTree, array);\r\n        } else {\r\n            // implicit dictionary\r\n            // Storing for utils formatting\r\n            let map = new Map();\r\n            map.damonOriginalLinesMapping = damonTree.damonOriginalLinesMapping;\r\n            if (damonTree.headless) {\r\n                map.headless = true;\r\n            }\r\n            return _recurse(damonTree, map);\r\n        }\r\n        /**\r\n         * @param {Object} tree\r\n         * @param {Map<string, any>|Array<any>} jsonMap\r\n         * @returns {Map<string, any>|Array<any>}\r\n         */\r\n        function _recurse(tree, jsonMap) {\r\n            if (\r\n                typeof tree !== 'object'\r\n                || tree == null\r\n                || Array.isArray(tree)\r\n            ) {\r\n                throw new Error(\r\n                    \"Error line number \"\r\n                    + ((damonTree.headless * -1) + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                    + \": @param { {} } tree\",\r\n                    {\r\n                        line:\r\n                            (damonTree.headless * -1)\r\n                            + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                        language: \"DAMON\"\r\n                    }\r\n                );\r\n            }\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) { // {}\r\n                _mapHandler(tree, jsonMap);\r\n            } else if (Array.isArray(jsonMap)) {\r\n                // []\r\n                _listHandler(tree, jsonMap);\r\n            } else {\r\n                throw new Error(\r\n                    \"Error line number \"\r\n                    + ((damonTree.headless * -1) + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                    + \": @param { {} | [] } jsonMap\",\r\n                    {\r\n                        line:\r\n                            (damonTree.headless * -1)\r\n                            + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                        language: \"DAMON\"\r\n                    }\r\n                );\r\n            }\r\n            return jsonMap;\r\n        }\r\n\r\n        /**\r\n         * @param {Object} tree\r\n         * @param {Map<string, any>|Array<any>} jsonMap\r\n         */\r\n        function _mapHandler(tree, jsonMap) {\r\n            for (let i = 0, c = tree.children.length; i < c; i++) {\r\n                treeItemIndex++;\r\n                if (tree.children[i].content.length == 0) {\r\n                    // implicit value\r\n                    let errorType;\r\n                    if (tree.children[i].children.length > 0) {\r\n                        errorType = \"implicit map key\";\r\n                        jsonMap.set(\"\", new Map());\r\n                        // Storing formatting for auto-formatting\r\n                        if (jsonMap.implicitMaps === undefined) {\r\n                            jsonMap.implicitMaps = [];\r\n                        }\r\n                        jsonMap.implicitMaps.push(\"\");\r\n                        _recurse(tree.children[i], jsonMap.get(\"\"));\r\n                    } else {\r\n                        errorType = \"implicit null key\";\r\n                        jsonMap.set(\"\", null);\r\n                        // Storing formatting for auto-formatting\r\n                        if (jsonMap.implicitNulls ===  undefined) {\r\n                            jsonMap.implicitNulls = [];\r\n                        }\r\n                        jsonMap.implicitNulls.push(\"\");\r\n                    }\r\n                } else {\r\n                    let text = tree.children[i].content,\r\n                        errorType = \"key\";\r\n                    // Catching JSON.stringify() and JSON.parse() throws\r\n                    try {\r\n                        if (\r\n                            /^.*: +\\[/.test(text)\r\n                            && text[text.length - 1] == ']'\r\n                        ) {\r\n                            if (\r\n                                /: +\\[ *\\]$/.test(text)\r\n                            ) {\r\n                                let key =\r\n                                    JSON.parse(\r\n                                        `[\"${text.slice(0, -1 * text.match(/: +\\[ *\\]$/)[0].length)}\"]`\r\n                                    )[0];\r\n                                jsonMap.set(key, []);\r\n                                if (tree.children[i].children.length > 0) {\r\n                                    _recurse(tree.children[i], jsonMap.get(key));\r\n                                }\r\n                            } else {\r\n                                // Normalizing\r\n                                let redundantWhitespaceMatchingRegex = new RegExp(/: +\\[/g),\r\n                                    splitString = text.slice(0, -1).split(redundantWhitespaceMatchingRegex),\r\n                                    textMatchesPlusOne = text.match(redundantWhitespaceMatchingRegex).concat(['']),\r\n                                    splitStringWithMatches = splitString.map((x, i) => x + textMatchesPlusOne[i]),\r\n                                    shortestPossibleKey = '',\r\n                                    longestPossibleArray = [];\r\n                                for (let j = 0, k = splitString.length; j < k; j++) {\r\n                                    try {\r\n                                        let concatenation;\r\n                                        if (j == 0) {\r\n                                            concatenation = splitString[0];\r\n                                        } else {\r\n                                            concatenation =\r\n                                                splitStringWithMatches.slice(0, j).join('')\r\n                                                + splitString[j];\r\n                                        }\r\n                                        shortestPossibleKey = JSON.parse(`[\"${concatenation}\"]`)[0];\r\n                                        errorType = \"list\";\r\n                                        longestPossibleArray =\r\n                                            JSON.parse(`[${splitStringWithMatches.slice(j + 1).join('')}]`);\r\n                                        if (Array.isArray(longestPossibleArray)) {\r\n                                            break;\r\n                                        }\r\n                                    } catch (error) {\r\n                                        // Doesn't matter until...\r\n                                        if (j == k - 2) {\r\n                                            throw new Error(\r\n                                                \"Error line number \"\r\n                                                + ((damonTree.headless * -1)\r\n                                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                                + \": invalid inline list\",\r\n                                                {\r\n                                            line:\r\n                                                (damonTree.headless * -1)\r\n                                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                                            language: \"DAMON\"\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // Primitives check here\r\n                                let arrayOfPrimitives =\r\n                                    longestPossibleArray.every(function (item) {\r\n                                        if (item === true) {\r\n                                            return true;\r\n                                        } else if (item === false) {\r\n                                            return true;\r\n                                        } else if (item === null) {\r\n                                            nullsCounter++;\r\n                                            return true;\r\n                                        } else if (typeof item == 'string') {\r\n                                            return true;\r\n                                        } else if (\r\n                                            isFinite(item)\r\n                                            && !isNaN(parseFloat(item))\r\n                                            && Number.isFinite(item * 1)\r\n                        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                                            && !Number.isNaN(item * 1)\r\n                                        ) { // Number\r\n                                            return true;\r\n                                        } else {\r\n                                            return false;\r\n                                        }\r\n                                    });\r\n                                if (arrayOfPrimitives) {\r\n                                    // No nesting, fits on an archivable line\r\n                                    jsonMap.set(shortestPossibleKey, longestPossibleArray);\r\n                                    // Storing formatting for auto-formatting options\r\n                                    if (jsonMap.damonInlineArrays === undefined) {\r\n                                        jsonMap.damonInlineArrays = [];\r\n                                    }\r\n                                    jsonMap.damonInlineArrays.push(shortestPossibleKey);\r\n                                } else {\r\n                                    throw new Error(\r\n                                        \"Error line number \"\r\n                                        + ((damonTree.headless * -1)\r\n                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                        + \": no nesting in inline lists\",\r\n                                        {\r\n                                            line:\r\n                                                (damonTree.headless * -1)\r\n                                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                                            language: \"DAMON\"\r\n                                        }\r\n                                    );\r\n                                }\r\n                                if (tree.children[i].children.length > 0) {\r\n                                    throw new Error(\r\n                                        \"Error line number \"\r\n                                        + ((damonTree.headless * -1)\r\n                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 3)\r\n                                        + \": inline lists can\\'t have children\",\r\n                                        {\r\n                                            line:\r\n                                                (damonTree.headless * -1)\r\n                                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 3,\r\n                                            language: \"DAMON\"\r\n                                        }\r\n                                    );\r\n                                }\r\n                            }\r\n                        } else if (\r\n                            /: +\\{ *\\}$/.test(text)\r\n                        ) { // Map\r\n                            let key =\r\n                                JSON.parse(\r\n                                    `[\"${text.slice(0, -1 * text.match(/: +\\{ *\\}$/)[0].length)}\"]`\r\n                                )[0];\r\n                            jsonMap.set(key, new Map());\r\n                            _recurse(tree.children[i], jsonMap.get(key));\r\n                        } else {\r\n                            let implicitProperty = false;\r\n                            if (\r\n                                text.split(new RegExp(/: +/))[text.split(new RegExp(/: +/)).length - 1] === \"true\"\r\n                            ) { // True\r\n                                let lastTextMatch =\r\n                                        text.match(new RegExp(/: +/g))[text.match(new RegExp(/: +/g)).length - 1],\r\n                                    key = JSON.parse(`[\"${text.slice(0, (-1 * lastTextMatch.length) -4)}\"]`)[0];\r\n                                jsonMap.set(key, true);\r\n                            } else if (\r\n                                text.split(new RegExp(/: +/))[text.split(new RegExp(/: +/)).length - 1] === \"false\"\r\n                            ) { // False\r\n                                let lastTextMatch =\r\n                                        text.match(new RegExp(/: +/g))[text.match(new RegExp(/: +/g)).length - 1],\r\n                                    key = JSON.parse(`[\"${text.slice(0, (-1 * lastTextMatch.length) -5)}\"]`)[0];\r\n                                jsonMap.set(key, false);\r\n                            } else if (\r\n                                text.split(new RegExp(/: +/))[text.split(new RegExp(/: +/)).length - 1] == \"null\"\r\n                            ) { // Null\r\n                                let lastTextMatch =\r\n                                        text.match(new RegExp(/: +/g))[text.match(new RegExp(/: +/g)).length - 1],\r\n                                    key = JSON.parse(`[\"${text.slice(0, (-1 * lastTextMatch.length) -4)}\"]`)[0];\r\n                                jsonMap.set(key, null);\r\n                            } else if (\r\n                                /^.*: +\"/.test(text)\r\n                                && text[text.length - 1] == '\"'\r\n                            ) { // String\r\n                                let separatorMatches = text.match(new RegExp(/: +\"/g));\r\n                                if (\r\n                                    separatorMatches.length == 1\r\n                                ) {\r\n                                    let key =\r\n                                        JSON.parse(\r\n                                            `[\"${text.split(separatorMatches[0])[0]}\"]`\r\n                                        )[0];\r\n                                    errorType = \"string\";\r\n                                    let childText =\r\n                                        JSON.parse(\r\n                                            `[\"${\r\n                                                text.split(separatorMatches[0]).slice(1).join('').slice(0, -1)\r\n                                            }\"]`\r\n                                        )[0];\r\n                                    jsonMap.set(key, childText);\r\n                                } else if (\r\n                                    separatorMatches.length == 2\r\n                                    && /: +\"$/.test(text)\r\n                                ) {\r\n                                    let key =\r\n                                        JSON.parse(\r\n                                            `[\"${text.split(separatorMatches[0])[0]}\"]`\r\n                                        )[0];\r\n                                    errorType = \"string\";\r\n                                    let childText =\r\n                                        JSON.parse(\r\n                                            `[\"${\r\n                                                text.split(separatorMatches[0]).slice(1).join('') + ': '\r\n                                            }\"]`\r\n                                        )[0];\r\n                                    jsonMap.set(key, childText);\r\n                                } else {\r\n                                    throw new Error(\r\n                                        \"Error line number \"\r\n                                        + ((damonTree.headless * -1)\r\n                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                        + \": unescaped double quote\",\r\n                                        {\r\n                                            line: (damonTree.headless * -1)\r\n                                            + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                                            language: \"DAMON\"\r\n                                        }\r\n                                    );\r\n                                }\r\n                            } else if (\r\n                                /^.*: /.test(text)\r\n                                && isFinite(text.split(': ')[text.split(': ').length - 1])\r\n                                && !isNaN(parseFloat(text.split(': ')[text.split(': ').length - 1]))\r\n                                && Number.isFinite(text.split(': ')[text.split(': ').length - 1] * 1)\r\n                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                                && !Number.isNaN(text.split(': ')[text.split(': ').length - 1] * 1)\r\n                            ) { // Number\r\n                                let key = JSON.parse(`[\"${text.split(': ').slice(0, -1).join(': ')}\"]`)[0];\r\n                                errorType = \"number\";\r\n                                let separatorMatches = text.match(new RegExp(/: +/g)),\r\n                                    lastSeparatorMatch = separatorMatches[separatorMatches.length - 1],\r\n                                    value = text.split(lastSeparatorMatch)[text.split(lastSeparatorMatch).length - 1];\r\n                                if (\r\n                                    value.indexOf(0) == 0\r\n                                    && value.length > 1\r\n                                    && value.indexOf('.') !== 1\r\n                                ) {\r\n                                    throw new Error(\r\n                                \"Error line number \"\r\n                                + ((damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                + \": leading 0\",\r\n                                        {\r\n                                line:\r\n                                    (damonTree.headless * -1)\r\n                                    + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                                language: \"DAMON\"\r\n                                        }\r\n                                    );\r\n                                }\r\n                                let number = JSON.parse(`[${text.split(': ')[text.split(': ').length - 1] * 1}]`)[0];\r\n                                jsonMap.set(key, number);\r\n                            } else if (\r\n                                /^.*: /.test(text)\r\n                                && (\r\n                                    text.split(new RegExp(/: +/))[text.split(new RegExp(/: +/)).length - 1] * 1\r\n                                ) === Infinity\r\n                            ) {\r\n                                let key = JSON.parse(`[\"${text.split(': ').slice(0, -1).join(': ')}\"]`)[0];\r\n                                errorType = \"infinity\";\r\n                                // JSON.parse() throws at Infinity\r\n                                let number = JSON.parse(`[${text.split(': ')[text.split(': ').length - 1] * 1}]`);\r\n                            } else {\r\n                                // Value re-checks\r\n                                // Hoisting worth using returns above?\r\n                                let validValue = false,\r\n                                    valueLength = 0;\r\n                                if (\r\n                                    /\\[ *\\]$/.test(text)\r\n                                ) {\r\n                                    validValue = true;\r\n                                    valueLength = text.match(new RegExp(/\\[ *\\]$/g))[0].length;\r\n                                }\r\n                                if (\r\n                                    /\\{ *\\}$/.test(text)\r\n                                ) {\r\n                                    validValue = true;\r\n                                    valueLength = text.match(new RegExp(/\\{ *\\}$/g))[0].length;\r\n                                }\r\n                                if (\r\n                                    /true$/.test(text)\r\n                                ) {\r\n                                    validValue = true;\r\n                                    valueLength = 4;\r\n                                }\r\n                                if (\r\n                                    /false$/.test(text)\r\n                                ) {\r\n                                    validValue = true;\r\n                                    valueLength = 5;\r\n                                }\r\n                                if (\r\n                                    /null$/.test(text)\r\n                                ) {\r\n                                    validValue = true;\r\n                                    valueLength = 4;\r\n                                }\r\n                                if (\r\n                                    /\".*\"$/.test(text)\r\n                                ) {\r\n                                    validValue = true;\r\n                                    valueLength = text.match(new RegExp(/\".*\"$/g))[0].length;\r\n                                }\r\n                                if (!validValue) {\r\n                                    let accumulator = '';\r\n                                    for (let i = text.length - 1; i > -1; i--) {\r\n                                        accumulator = text[i].concat(accumulator);\r\n                                        if (\r\n                                            isFinite(accumulator)\r\n                                            && !isNaN(parseFloat(accumulator))\r\n                                            && Number.isFinite(accumulator * 1)\r\n                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                                            && !Number.isNaN(accumulator * 1)\r\n                                        ) {\r\n                                            if (!/[ \\t]/.test(text[i])) {\r\n                                                break;\r\n                                            }\r\n                                            validValue = true;\r\n                                            valueLength = accumulator.length;\r\n                                        } else {\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (validValue) {\r\n                                    // valid value\r\n                                    let string = JSON.parse(`[\"${text.slice(0, -1 * valueLength)}\"]`)[0];\r\n                                    // valid key\r\n                                    if ($.pedantic) {\r\n                                        // pedantic\r\n                                        // missing separator error\r\n                                        throw new Error(\r\n                                            \"Error line number \"\r\n                                            + ((damonTree.headless * -1)\r\n                                            + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex))\r\n                                            + \": missing separator\",\r\n                                            {\r\n                                                line:\r\n                                                    (damonTree.headless * -1)\r\n                                                    + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex),\r\n                                                language: \"DAMON\",\r\n                                                errorType: \"pedantic\"\r\n                                            }\r\n                                        );\r\n                                    } else {\r\n                                        // not pedantic\r\n                                        if (!/: +$/.test(string)) {\r\n                                            // string value\r\n                                            // missing separator error\r\n                                            throw new Error(\r\n                                                \"Error line number \"\r\n                                                + ((damonTree.headless * -1)\r\n                                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex))\r\n                                                + \": missing separator\",\r\n                                                {\r\n                                                    line:\r\n                                                        (damonTree.headless * -1)\r\n                                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex),\r\n                                                    language: \"DAMON\",\r\n                                                    errorType: \"pedantic\"\r\n                                                }\r\n                                            );\r\n                                        } else {\r\n                                            // not string value\r\n                                            // implicit value\r\n                                            implicitProperty = true;\r\n                                            if (tree.children[i].children.length > 0) {\r\n                                                errorType = \"implicit map key\";\r\n                                                let key = JSON.parse(`[\"${text}\"]`)[0];\r\n                                                jsonMap.set(key, new Map());\r\n                                                // Storing formatting for auto-formatting\r\n                                                if (jsonMap.implicitMaps === undefined) {\r\n                                                    jsonMap.implicitMaps = [];\r\n                                                }\r\n                                                jsonMap.implicitMaps.push(key);\r\n                                                _recurse(tree.children[i], jsonMap.get(key));\r\n                                            } else {\r\n                                                errorType = \"implicit null key\";\r\n                                                let key = JSON.parse(`[\"${text}\"]`)[0];\r\n                                                jsonMap.set(key, null);\r\n                                                // Storing formatting for auto-formatting\r\n                                                if (jsonMap.implicitNulls ===  undefined) {\r\n                                                    jsonMap.implicitNulls = [];\r\n                                                }\r\n                                                jsonMap.implicitNulls.push(key);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    // invalid value\r\n                                    let string =JSON.parse(`[\"${text.slice(0, -1 * valueLength)}\"]`)[0];\r\n                                    // valid as a key\r\n                                    if ($.pedantic) {\r\n                                        // pedantic\r\n                                        if (/: +$/.test(string)) {\r\n                                            // key end has separator\r\n                                            // bad value\r\n                                            throw new Error(\r\n                                                \"Error line number \"\r\n                                                + ((damonTree.headless * -1)\r\n                                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 3)\r\n                                                + \": bad value\",\r\n                                                {\r\n                                                    line:\r\n                                                        (damonTree.headless * -1)\r\n                                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex),\r\n                                                    language: \"DAMON\",\r\n                                                    errorType: \"pedantic\"\r\n                                                }\r\n                                            );\r\n                                        } else {\r\n                                            // key end lacks separator\r\n                                            // missing separator\r\n                                            throw new Error(\r\n                                                \"Error line number \"\r\n                                                + ((damonTree.headless * -1)\r\n                                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex))\r\n                                                + \": missing separator\",\r\n                                                {\r\n                                                    line:\r\n                                                        (damonTree.headless * -1)\r\n                                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex),\r\n                                                    language: \"DAMON\",\r\n                                                    errorType: \"pedantic\"\r\n                                                }\r\n                                            );\r\n                                        }\r\n                                    } else {\r\n                                        // not pedantic\r\n                                        // use as implicit\r\n                                        implicitProperty = true;\r\n                                        if (tree.children[i].children.length > 0) {\r\n                                            errorType = \"implicit map key\";\r\n                                            let key = JSON.parse(`[\"${text}\"]`)[0];\r\n                                            jsonMap.set(key, new Map());\r\n                                            // Storing formatting for auto-formatting\r\n                                            if (jsonMap.implicitMaps === undefined) {\r\n                                                jsonMap.implicitMaps = [];\r\n                                            }\r\n                                            jsonMap.implicitMaps.push(key);\r\n                                            _recurse(tree.children[i], jsonMap.get(key));\r\n                                        } else {\r\n                                            errorType = \"implicit null key\";\r\n                                            let key = JSON.parse(`[\"${text}\"]`)[0];\r\n                                            jsonMap.set(key, null);\r\n                                            // Storing formatting for auto-formatting\r\n                                            if (jsonMap.implicitNulls ===  undefined) {\r\n                                                jsonMap.implicitNulls = [];\r\n                                            }\r\n                                            jsonMap.implicitNulls.push(key);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (\r\n                                !implicitProperty\r\n                                && tree.children[i].children.length > 0\r\n                            ) {\r\n                                throw new Error(\r\n                                        \"Error line number \"\r\n                                        + ((damonTree.headless * -1)\r\n                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 3)\r\n                                        + \": missing container or excess indentation\",\r\n                                    {\r\n                                        line:\r\n                                            (damonTree.headless * -1)\r\n                                            + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 3,\r\n                                        language: \"DAMON\"\r\n                                    }\r\n                                );\r\n                            }\r\n                        }\r\n                    } catch (error) {\r\n                        if (error.language === undefined) {\r\n                            console.error(\r\n                                \"Error line number \"\r\n                                + ((damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                + \": not JSON-compliant, detailed error follows\"\r\n                            );\r\n                            error.line =\r\n                                (damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2;\r\n                            error.language = \"JSON\";\r\n                            error.type = errorType;\r\n                        }\r\n                        throw error;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @param {Object} tree\r\n         * @param {Map<string, any>|Array<any>} jsonMap\r\n         */\r\n        function _listHandler(tree, jsonMap) {\r\n            for (let i = 0, c = tree.children.length; i < c; i++) {\r\n                treeItemIndex++;\r\n                if (tree.children[i].content.length) {\r\n                    let text = tree.children[i].content;\r\n                    if (\r\n                        /^[ \\t]*\\[/.test(text)\r\n                        && text[text.length - 1] == ']'\r\n                    ) {\r\n                        if (\r\n                            /^[ \\t]*\\[ *\\]$/.test(text)\r\n                        ) {\r\n                            jsonMap.push([]);\r\n                            _recurse(tree.children[i], jsonMap[jsonMap.length - 1]);\r\n                        } else {\r\n                            let inlineArray;\r\n                            try {\r\n                                inlineArray = JSON.parse(text);\r\n                            } catch (error) {\r\n                                throw new Error(\r\n                                        \"Error line number \"\r\n                                        + ((damonTree.headless * -1)\r\n                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                        + \": invalid inline lists\",\r\n                                    {\r\n                                        line:\r\n                                            (damonTree.headless * -1)\r\n                                            + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                                        language: \"JSON\",\r\n                                        type: \"list\"\r\n                                    }\r\n                                );\r\n                            }\r\n                            let arrayOfPrimitives =\r\n                                    inlineArray.every(function (item) {\r\n                                        if (item === true) {\r\n                                            return true;\r\n                                        } else if (item === false) {\r\n                                            return true;\r\n                                        } else if (item === null) {\r\n                                            nullsCounter++;\r\n                                            return true;\r\n                                        } else if (typeof item == 'string') {\r\n                                            return true;\r\n                                        } else if (\r\n                                            isFinite(item)\r\n                                            && !isNaN(parseFloat(item))\r\n                                            && Number.isFinite(item * 1)\r\n                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                                            && !Number.isNaN(item * 1)\r\n                                        ) { // Number\r\n                                            return true;\r\n                                        } else {\r\n                                            return false;\r\n                                        }\r\n                                    });\r\n                            if (arrayOfPrimitives) {\r\n                                jsonMap.push(inlineArray);\r\n                                // Storing formatting for auto-formatting options\r\n                                if (jsonMap.damonInlineArrays === undefined) {\r\n                                    jsonMap.damonInlineArrays = [];\r\n                                }\r\n                                jsonMap.damonInlineArrays.push(i);\r\n                            } else {\r\n                                throw new Error(\r\n                                        \"Error line number \"\r\n                                        + ((damonTree.headless * -1)\r\n                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                        + \": no nesting in inline lists\",\r\n                                    {\r\n                                        line:\r\n                                            (damonTree.headless * -1)\r\n                                            + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                                        language: \"DAMON\"\r\n                                    }\r\n                                );\r\n                            }\r\n                            if (tree.children[i].children.length > 0) {\r\n                                throw new Error(\r\n                                        \"Error line number \"\r\n                                        + ((damonTree.headless * -1)\r\n                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 3)\r\n                                        + \": inline lists can\\'t have children\",\r\n                                    {\r\n                                        line:\r\n                                            (damonTree.headless * -1)\r\n                                            + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 3,\r\n                                        language: \"DAMON\"\r\n                                    }\r\n                                );\r\n                            }\r\n                        }\r\n                    } else if (/^[ \\t]*\\{\\}$/.test(text)) {\r\n                        jsonMap.push(new Map());\r\n                        _recurse(tree.children[i], jsonMap[jsonMap.length - 1]);\r\n                    } else if (/^[ \\t]*true$/.test(text)) {\r\n                        jsonMap.push(true);\r\n                    } else if (/^[ \\t]*false$/.test(text)) {\r\n                        jsonMap.push(false);\r\n                    } else if (/^[ \\t]*null$/.test(text)) {\r\n                        jsonMap.push(null);\r\n                    } else if (/^[ \\t]*\".*\"$/.test(text)) {\r\n                        try {\r\n                            jsonMap.push(JSON.parse(`[${text.trimStart()}]`)[0]);\r\n                        } catch (error) {\r\n                            console.error(\r\n                                \"Error line number \"\r\n                                + ((damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                + \": not JSON-compliant, detailed error follows\"\r\n                            );\r\n                            error.line =\r\n                                (damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2;\r\n                            error.language = \"JSON\";\r\n                            error.type = \"string\";\r\n                            throw error;\r\n                        }\r\n                    } else if (\r\n                        isFinite(text)\r\n                        && !isNaN(parseFloat(text))\r\n                        && Number.isFinite(text * 1)\r\n                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                        && !Number.isNaN(text * 1)\r\n                    ) {\r\n                        if (\r\n                            text.indexOf(0) == 0\r\n                            && text.length > 1\r\n                            && text.indexOf('.') !== 1\r\n                        ) {\r\n                            throw new Error(\r\n                                \"Error line number \"\r\n                                + ((damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                + \": leading 0\",\r\n                                {\r\n                                    line:\r\n                                        (damonTree.headless * -1)\r\n                                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                                    language: \"DAMON\"\r\n                                }\r\n                            );\r\n                        }\r\n                        try {\r\n                            jsonMap.push(JSON.parse(`[${text * 1}]`)[0]);\r\n                        } catch (error) {\r\n                            console.error(\r\n                                \"Error line number \"\r\n                                + ((damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                + \": not JSON-compliant, detailed error follows\"\r\n                            );\r\n                            error.line =\r\n                                (damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2;\r\n                            error.language = \"JSON\";\r\n                            error.type = \"number\";\r\n                            throw error;\r\n                        }\r\n                    } else if (text * 1 === Infinity) {\r\n                        // Make JSON.parse throw at Infinity\r\n                        try {\r\n                            JSON.parse(text * 1);\r\n                        } catch (error) {\r\n                            console.error(\r\n                                \"Error line number \"\r\n                                + ((damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                                + \": not JSON-compliant, detailed error follows\"\r\n                            );\r\n                            error.line =\r\n                                (damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2;\r\n                            error.language = \"JSON\";\r\n                            error.type = \"infinity\";\r\n                            throw error;\r\n                        }\r\n                    } else {\r\n                        throw new Error(\r\n                            \"Error line number \"\r\n                            + ((damonTree.headless * -1)\r\n                            + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                            + \": list items can\\'t have a key\",\r\n                            {\r\n                                line:\r\n                                    (damonTree.headless * -1)\r\n                                    + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                                language: \"DAMON\"\r\n                            }\r\n                        );\r\n                    }\r\n                } else {\r\n                    throw new Error(\r\n                        \"Error line number \"\r\n                        + ((damonTree.headless * -1)\r\n                        + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2)\r\n                        + \": empty list node\",\r\n                        {\r\n                            line:\r\n                                (damonTree.headless * -1)\r\n                                + damonTree.damonOriginalLinesMapping.indexOf(treeItemIndex - 1) + 2,\r\n                            language: \"DAMON\"\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Map<string, any>|Array<any>|boolean|null|string|number} jsonMap\r\n     * @param {boolean} pristine\r\n     * @returns {string}\r\n     */\r\n    mapToDamon(jsonMap, pristine) {\r\n        let $ = this;\r\n        var list = ``;\r\n        if (Array.isArray(jsonMap)) {\r\n            list += '- []\\n';\r\n        } else if (\r\n            typeof jsonMap === 'object'\r\n            && jsonMap !== null\r\n            && jsonMap instanceof Map\r\n            && jsonMap.constructor === Map\r\n        ) {\r\n            list += '- {}\\n';\r\n        } else {\r\n            if (typeof jsonMap == 'string') {\r\n                jsonMap = '\"' + jsonMap + '\"';\r\n            }\r\n            JSON.parse(jsonMap);\r\n            return jsonMap;\r\n        }\r\n        _recurse(jsonMap);\r\n        // Parsing-check\r\n        $.damonToMap(list.slice(0, -1));\r\n        return list.slice(0, -1); // last linefeed\r\n        /**\r\n         * @param {Map<string, any>|Array<any>} jsonMap\r\n         * @param {number} [level=1]\r\n         * @returns {string}\r\n         */\r\n        function _recurse(jsonMap, level = 1) {\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                for (const [key, value] of jsonMap) {\r\n                    if (\r\n                        typeof value === 'object'\r\n                        && value !== null\r\n                    ) {\r\n                        if (Array.isArray(value)) {\r\n                            let nullsCounter = 0,\r\n                                arrayOfPrimitives = value.filter(function (item) {\r\n                                    if (item === true) {\r\n                                        return true;\r\n                                    } else if (item === false) {\r\n                                        return true;\r\n                                    } else if (item === null) {\r\n                                        nullsCounter++;\r\n                                        return true;\r\n                                    } else if (typeof item == 'string') {\r\n                                        return true;\r\n                                    } else if (\r\n                                        isFinite(item)\r\n                                        && !isNaN(parseFloat(item))\r\n                                        && Number.isFinite(item * 1)\r\n                        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                                        && !Number.isNaN(item * 1)\r\n                                    ) { // Number\r\n                                        return true;\r\n                                    } else {\r\n                                        return false;\r\n                                    }\r\n                                });\r\n                            if (\r\n                                ( // No nesting, fits on an archivable line\r\n                                    value.length == arrayOfPrimitives.length\r\n                                    && (level * 4 + 2 + value.join(', ').length + (nullsCounter * 4)) <= 80\r\n                                ) || ( // Inlining specified from parsing\r\n                                    pristine\r\n                                    && jsonMap.damonInlineArrays !== undefined\r\n                                    && jsonMap.damonInlineArrays.indexOf(key) > -1\r\n                                )\r\n                            ) {\r\n                                let line =\r\n                                    '['\r\n                                    + value.map(function (x) {\r\n                                        if (typeof x == 'string') {\r\n                                            x = JSON.stringify(x);\r\n                                        }\r\n                                        return x;\r\n                                    }).join(', ')\r\n                                    + ']';\r\n                                list +=\r\n                                    '    '.repeat(level)\r\n                                    + '- ' + JSON.stringify(key).slice(1, -1) + ': ' + line + '\\n';\r\n                            } else {\r\n                                list += '    '.repeat(level) + '- ' + JSON.stringify(key).slice(1, -1) + ': []\\n';\r\n                                _recurse(value, level + 1);\r\n                            }\r\n                        } else {\r\n                            list += '    '.repeat(level) + '- ' + JSON.stringify(key).slice(1, -1) + ': {}\\n';\r\n                            _recurse(value, level + 1);\r\n                        }\r\n                    } else {\r\n                        list += '    '.repeat(level) + '- ' + JSON.stringify(key).slice(1, -1) + ': ';\r\n                        if (value === true) {\r\n                            list += \"true\\n\";\r\n                        } else if (value === false) {\r\n                            list += \"false\\n\";\r\n                        } else if (value === null) {\r\n                            list += \"null\\n\";\r\n                        } else if (\r\n                            Number.isFinite(value)\r\n                            && !Number.isNaN(value)\r\n                        ) {\r\n                            list += value + \"\\n\";\r\n                        } else {\r\n                            // console.log(value[2]);\r\n                            // console.log(JSON.parse('\"' + value.slice(3) + '\"'));\r\n                            list += JSON.stringify(value) + '\\n';\r\n                        }\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                for (var i = 0, c = jsonMap.length; i < c; i++) {\r\n                    if (\r\n                        typeof jsonMap[i] === 'object'\r\n                        && jsonMap[i] !== null\r\n                    ) {\r\n                        if (Array.isArray(jsonMap[i])) {\r\n                            let nullsCounter = 0,\r\n                                arrayOfPrimitives = jsonMap[i].filter(function (item) {\r\n                                if (item === true) {\r\n                                    return true;\r\n                                } else if (item === false) {\r\n                                    return true;\r\n                                } else if (item === null) {\r\n                                    nullsCounter++;\r\n                                    return true;\r\n                                } else if (typeof item == 'string') {\r\n                                    return true;\r\n                                } else if (\r\n                                    isFinite(item)\r\n                                    && !isNaN(parseFloat(item))\r\n                                    && Number.isFinite(item * 1)\r\n                        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\r\n                                    && !Number.isNaN(item * 1)\r\n                                ) { // Number\r\n                                    return true;\r\n                                } else {\r\n                                    return false;\r\n                                }\r\n                            });\r\n                            if ((\r\n                                    jsonMap[i].length == arrayOfPrimitives.length\r\n                                    && (level * 4 + 2 + jsonMap[i].join(', ').length + (nullsCounter * 4)) <= 80\r\n                                ) || (\r\n                                    pristine\r\n                                    && jsonMap.damonInlineArrays !== undefined\r\n                                    && jsonMap.damonInlineArrays.indexOf(i) > -1\r\n                                )\r\n                            ) {\r\n                                let line =\r\n                                    '['\r\n                                    + jsonMap[i].map(function (x) {\r\n                                        if (typeof x == 'string') {\r\n                                            x = JSON.stringify(x);\r\n                                        }\r\n                                        return x;\r\n                                    }).join(', ')\r\n                                    + ']';\r\n                                list += '    '.repeat(level) + '- ' + line + '\\n';\r\n                            } else {\r\n                                list += '    '.repeat(level) + \"- []\\n\";\r\n                                _recurse(jsonMap[i], level + 1);\r\n                            }\r\n                        } else {\r\n                            list += '    '.repeat(level) + \"- {}\\n\";\r\n                            _recurse(jsonMap[i], level + 1);\r\n                        }\r\n                    } else {\r\n                        if (jsonMap[i] === true) {\r\n                            list += '    '.repeat(level) + \"- true\\n\";\r\n                        } else if (jsonMap[i] === false) {\r\n                            list += '    '.repeat(level) + \"- false\\n\";\r\n                        } else if (jsonMap[i] === null) {\r\n                            list += '    '.repeat(level) + \"- null\\n\";\r\n                        } else if (\r\n                            Number.isFinite(jsonMap[i])\r\n                            && !Number.isNaN(jsonMap[i])\r\n                        ) {\r\n                            list += '    '.repeat(level) + '- ' + jsonMap[i] + \"\\n\";\r\n                        } else {\r\n                            list += '    '.repeat(level) + '- ' + JSON.stringify(jsonMap[i]) + '\\n';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Map<string, any>|Array<any>|boolean|null|string|number} jsonMap\r\n     * @returns {string}\r\n     */\r\n    mapToJSON(jsonMap) {\r\n        let $ = this;\r\n        var list = ``;\r\n        if (Array.isArray(jsonMap)) {\r\n            list += \"[\\r\\n\";\r\n            _recurse(jsonMap);\r\n            list += \"]\";\r\n            JSON.parse(list);\r\n            return list;\r\n        } else if (\r\n            typeof jsonMap === 'object'\r\n            && jsonMap !== null\r\n            && jsonMap instanceof Map\r\n            && jsonMap.constructor === Map\r\n        ) {\r\n            list += \"{\\r\\n\";\r\n            _recurse(jsonMap);\r\n            list += \"}\";\r\n            JSON.parse(list);\r\n            return list;\r\n        } else {\r\n            if (typeof jsonMap == 'string') {\r\n                jsonMap = JSON.stringify(jsonMap);\r\n            }\r\n            JSON.parse(jsonMap);\r\n            return jsonMap;\r\n        }\r\n        /**\r\n         * @param {Map<string, any>|Array<any>} jsonMap\r\n         * @param {number} [level=1]\r\n         * @returns {string}\r\n         */\r\n        function _recurse(jsonMap, level = 1) {\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                for (const [key, value] of jsonMap) {\r\n                    if (\r\n                        typeof value === 'object'\r\n                        && value !== null\r\n                    ) {\r\n                        if (Array.isArray(value)) {\r\n                            if (value.length > 0) {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}: [\\r\\n`;\r\n                                _recurse(value, level + 1);\r\n                                list += '    '.repeat(level) + `]`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}: []`;\r\n                            }\r\n                        } else {\r\n                            if (Array.from(value.keys()).length > 0) {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}: {\\r\\n`;\r\n                                _recurse(value, level + 1);\r\n                                list += '    '.repeat(level) + `}`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}: {}`;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (value === true) {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}` + ': ' + \"true\";\r\n                        } else if (value === false) {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}` + ': ' + \"false\";\r\n                        } else if (value === null) {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}` + ': ' + \"null\";\r\n                        } else if (\r\n                            Number.isFinite(value)\r\n                            && !Number.isNaN(value)\r\n                        ) {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}` + ': ' + value;\r\n                        } else {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}` + ': ' + JSON.stringify(value);\r\n                        }\r\n                    }\r\n                    if (key != Array.from(jsonMap.keys())[Array.from(jsonMap.keys()).length - 1]) {\r\n                        list += \",\\r\\n\";\r\n                    } else {\r\n                        list += \"\\r\\n\";\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                for (var i = 0, c = jsonMap.length; i < c; i++) {\r\n                    if (\r\n                        typeof jsonMap[i] === 'object'\r\n                        && jsonMap[i] !== null\r\n                    ) {\r\n                        if (Array.isArray(jsonMap[i])) {\r\n                            if (jsonMap[i].length > 0) {\r\n                                list += '    '.repeat(level) + `[\\r\\n`;\r\n                                _recurse(jsonMap[i], level + 1);\r\n                                list += '    '.repeat(level) + `]`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `[]`;\r\n                            }\r\n                        } else {\r\n                            if (Array.from(jsonMap[i].keys()).length > 0) {\r\n                                list += '    '.repeat(level) + `{\\r\\n`;\r\n                                _recurse(jsonMap[i], level + 1);\r\n                                list += '    '.repeat(level) + `}`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `{}`;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (jsonMap[i] === true) {\r\n                            list += '    '.repeat(level) + \"true\";\r\n                        } else if (jsonMap[i] === false) {\r\n                            list += '    '.repeat(level) + \"false\";\r\n                        } else if (jsonMap[i] === null) {\r\n                            list += '    '.repeat(level) + \"null\";\r\n                        } else if (\r\n                            Number.isFinite(jsonMap[i])\r\n                            && !Number.isNaN(jsonMap[i])\r\n                        ) {\r\n                            list += '    '.repeat(level) + jsonMap[i];\r\n                        } else {\r\n                            list += '    '.repeat(level) + JSON.stringify(jsonMap[i]);\r\n                        }\r\n                    }\r\n                    if (i != c - 1) {\r\n                        list += \",\\r\\n\";\r\n                    } else {\r\n                        list += \"\\r\\n\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Map<string, any>|Array<any>|boolean|null|string|number} jsonMap\r\n     * @returns {string}\r\n     */\r\n    implicitMapToSExpression(jsonMap) {\r\n        let $ = this;\r\n        var list = ``;\r\n         if (\r\n            typeof jsonMap === 'object'\r\n            && jsonMap !== null\r\n            && jsonMap instanceof Map\r\n            && jsonMap.constructor === Map\r\n        ) {\r\n            list += \"[\\r\\n\";\r\n            _recurse(jsonMap);\r\n            list += \"]\";\r\n            JSON.parse(list)\r\n            return list;\r\n        } else {\r\n            if (typeof jsonMap == 'string') {\r\n                jsonMap = '\"' + jsonMap + '\"';\r\n            }\r\n            JSON.parse(jsonMap)\r\n            return jsonMap;\r\n        }\r\n        /**\r\n         * @param {Map<string, any>|Array<any>} jsonMap\r\n         * @param {number} [level=1]\r\n         * @returns {string}\r\n         */\r\n        function _recurse(jsonMap, level = 1) {\r\n            if (\r\n                typeof jsonMap === 'object'\r\n                && jsonMap !== null\r\n                && !Array.isArray(jsonMap)\r\n                && jsonMap instanceof Map\r\n                && jsonMap.constructor === Map\r\n            ) {\r\n                let i = -1;\r\n                for (const [key, value] of jsonMap) {\r\n                    i++;\r\n                    if (\r\n                        typeof value === 'object'\r\n                        && value !== null\r\n                    ) {\r\n                        if (Array.isArray(value)) {\r\n                            if (value.length > 0) {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}, [\\r\\n`;\r\n                                _recurse(value, level + 1);\r\n                                list += '    '.repeat(level) + `]`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}, []`;\r\n                            }\r\n                        } else {\r\n                            if (Array.from(value.keys()).length > 0) {\r\n                                if (level == 1) {\r\n                                    if (i == 0) {\r\n                                        list = \"\";\r\n                                    } else {\r\n                                        throw new Error(\"Multiple S-Expression roots\");\r\n                                    }\r\n                                }\r\n                                list += '    '.repeat(level) + `[${JSON.stringify(key)}, \\r\\n`;\r\n                                _recurse(value, level + 1);\r\n                                if (level != 1) {\r\n                                    list += '    '.repeat(level) + `]`;\r\n                                }\r\n                            } else {\r\n                                list += '    '.repeat(level) + `${JSON.stringify(key)}, []`;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (value === true) {\r\n                            throw new Error('Booleans require quotes');\r\n                        } else if (value === false) {\r\n                            throw new Error('Booleans require quotes');\r\n                        } else if (value === null) {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}`;\r\n                        } else if (\r\n                            Number.isFinite(value)\r\n                            && !Number.isNaN(value)\r\n                        ) {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}` + ', ' + value;\r\n                        } else {\r\n                            list += '    '.repeat(level) + `${JSON.stringify(key)}` + ', ' + `\"${value}\"`;\r\n                        }\r\n                    }\r\n                    if (key != Array.from(jsonMap.keys())[Array.from(jsonMap.keys()).length - 1]) {\r\n                        list += \",\\r\\n\";\r\n                    } else {\r\n                        list += \"\\r\\n\";\r\n                    }\r\n                }\r\n            } else if (Array.isArray(jsonMap)) {\r\n                for (var i = 0, c = jsonMap.length; i < c; i++) {\r\n                    if (\r\n                        typeof jsonMap[i] === 'object'\r\n                        && jsonMap[i] !== null\r\n                    ) {\r\n                        if (Array.isArray(jsonMap[i])) {\r\n                            if (jsonMap[i].length > 0) {\r\n                                list += '    '.repeat(level) + `[\\r\\n`;\r\n                                _recurse(jsonMap[i], level + 1);\r\n                                list += '    '.repeat(level) + `]`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `[]`;\r\n                            }\r\n                        } else {\r\n                            if (Array.from(jsonMap[i].keys()).length > 0) {\r\n                                list += '    '.repeat(level) + `[\\r\\n`;\r\n                                _recurse(jsonMap[i], level + 1);\r\n                                list += '    '.repeat(level) + `]`;\r\n                            } else {\r\n                                list += '    '.repeat(level) + `[]`;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (jsonMap[i] === true) {\r\n                            throw new Error('Booleans require quotes');\r\n                        } else if (jsonMap[i] === false) {\r\n                            throw new Error('Booleans require quotes');\r\n                        } else if (jsonMap[i] === null) {\r\n                            throw new Error('Array-nulls require quotes');\r\n                        } else if (\r\n                            Number.isFinite(jsonMap[i])\r\n                            && !Number.isNaN(jsonMap[i])\r\n                        ) {\r\n                            list += '    '.repeat(level) + jsonMap[i];\r\n                        } else {\r\n                            list += '    '.repeat(level) + JSON.stringify(jsonMap[i]);\r\n                        }\r\n                    }\r\n                    if (i != c - 1) {\r\n                        list += \",\\r\\n\";\r\n                    } else {\r\n                        list += \"\\r\\n\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} damon\r\n     * @param {Array<string|number>} path\r\n     * @returns {Array<Array<number>>}\r\n     */\r\n    getRangeFromPath(damon, path) {\r\n        let $ = this;\r\n        let damonMap = $.damonToMap(damon),\r\n            line = -1,\r\n            found = false;\r\n        _incrementLineUntilReaching(damonMap, path);\r\n        if (damonMap.headless)\r\n            line -= 1;\r\n        let totalLines = 0,\r\n            match = 0;\r\n        for (let i = 0, c = damonMap.damonOriginalLinesMapping.length; i < c; i++) {\r\n            if (damonMap.damonOriginalLinesMapping[i] !== null) {\r\n                match++;\r\n            }\r\n            if (match == line) {\r\n                totalLines = i + 1;\r\n                break;\r\n            }\r\n        }\r\n        let lineText = $._getLines(damon)[totalLines],\r\n            start = 0,\r\n            end = lineText.length;\r\n        if (path.length == 1) {\r\n            if (typeof path[path.length - 1] == 'string') {\r\n                start =\r\n                    lineText.length\r\n                    - lineText.trimStart().slice(2 + path[path.length - 1].length + 2).trimStart().length;\r\n            } else {\r\n                start = lineText.length - lineText.trimStart().slice(2).length;\r\n            }\r\n        } else {\r\n            if (typeof path[path.length - 2] == 'string') {\r\n                if (typeof path[path.length - 1] == 'string') {\r\n                    start =\r\n                        lineText.length\r\n                        - lineText.trimStart().slice(2 + path[path.length - 1].length + 2).trimStart().length;\r\n                } else {\r\n                    if (\r\n                        lineText[lineText.length - 1] == ']'\r\n                        && !/\\[ *\\]$/.test(lineText)\r\n                    ) {\r\n                        let arrayText = lineText.trimStart().slice(2 + path[path.length - 2].length + 2),\r\n                            array = JSON.parse(arrayText),\r\n                            occurences =\r\n                                array.slice(0, path[path.length - 1].length)\r\n                                    .reduce((acc, value) => acc + (value === array[path[path.length - 1]]), 0),\r\n                            index = 0,\r\n                            match = array[path[path.length - 1]];\r\n                        if (typeof match == 'string')\r\n                            match = '\"' + match + '\"';\r\n                        for (let i = 0, c = occurences + 1; i < c; i++) {\r\n                            index = arrayText.indexOf(match, index);\r\n                        }\r\n                        start = lineText.length - arrayText.length + index;\r\n                        end = start + match.length;\r\n                    } else {\r\n                        start = lineText.length - lineText.trimStart().slice(2).length;\r\n                    }\r\n                }\r\n            } else {\r\n                if (typeof path[path.length - 1] == 'string') {\r\n                    start =\r\n                        lineText.length\r\n                        - lineText.trimStart().slice(2 + path[path.length - 1].length + 2).trimStart().length;\r\n                } else {\r\n                    if (\r\n                        lineText[lineText.length - 1] == ']'\r\n                        && !/\\[ *\\]$/.test(lineText)\r\n                    ) {\r\n                        let arrayText = lineText.trimStart().slice(2),\r\n                            array = JSON.parse(arrayText),\r\n                            occurences =\r\n                                array.slice(0, path[path.length - 1])\r\n                                    .reduce((acc, value) => acc + (value === array[path[path.length - 1]]), 0),\r\n                            index = 0,\r\n                            match = array[path[path.length - 1]];\r\n                        if (typeof match == 'string')\r\n                            match = '\"' + match + '\"';\r\n                        for (let i = 0, c = occurences + 1; i < c; i++) {\r\n                            index = arrayText.indexOf(match, index);\r\n                        }\r\n                        start = lineText.length - arrayText.length + index;\r\n                        end = start + match.length;\r\n                    } else {\r\n                        start = lineText.length - lineText.trimStart().slice(2).length;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [[totalLines, start], [totalLines, end]];\r\n        /**\r\n         * @param {Map<string, any>|Array<any>} map\r\n         * @param {Array<string|number>} targetPath\r\n         * @param {Array<string|number>} [currentPath=[]]\r\n        */\r\n        function _incrementLineUntilReaching(map, targetPath, currentPath = []) {\r\n            if (found == true) {\r\n                return;\r\n            }\r\n            line += 1;\r\n            if (\r\n                typeof map === 'object'\r\n                && map !== null\r\n                && !Array.isArray(map)\r\n                && map instanceof Map\r\n                && map.constructor === Map\r\n            ) {\r\n                for (const [key, value] of map) {\r\n                    line += 1;\r\n                    if (\r\n                        typeof value === 'object'\r\n                        && value !== null\r\n                        && !Array.isArray(value)\r\n                        && value instanceof Map\r\n                        && value.constructor === Map\r\n                    ) {\r\n                        if (JSON.stringify(targetPath) === JSON.stringify(currentPath.concat([key]))) {\r\n                            found = true;\r\n                            return;\r\n                        } else if (Array.from(value.keys()).length) {\r\n                            line -= 1;\r\n                            _incrementLineUntilReaching(value, targetPath, currentPath.concat([key]));\r\n                        }\r\n                    } else if (Array.isArray(value)) {\r\n                        if (JSON.stringify(targetPath) === JSON.stringify(currentPath.concat([key]))) {\r\n                            found = true;\r\n                            return;\r\n                        } else if (\r\n                            (\r\n                                map.damonInlineArrays == undefined\r\n                                || map.damonInlineArrays.indexOf(key) === -1\r\n                            ) && value.length\r\n                        ) {\r\n                            line -= 1;\r\n                            _incrementLineUntilReaching(value, targetPath, currentPath.concat([key]));\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0, c = map.length; i < c; i++) {\r\n                    line += 1;\r\n                    if (\r\n                        typeof map[i] === 'object'\r\n                        && map[i] !== null\r\n                        && !Array.isArray(map[i])\r\n                        && map[i] instanceof Map\r\n                        && map[i].constructor === Map\r\n                    ) {\r\n                        if (JSON.stringify(targetPath) === JSON.stringify(currentPath.concat([i]))) {\r\n                            found = true;\r\n                            return;\r\n                        } else if (Array.from(map[i].keys()).length) {\r\n                            line -= 1;\r\n                            _incrementLineUntilReaching(map[i], targetPath, currentPath.concat([i]));\r\n                        }\r\n                    } else if (Array.isArray(map[i])) {\r\n                        if (JSON.stringify(targetPath) === JSON.stringify(currentPath.concat([i]))) {\r\n                            found = true;\r\n                            return;\r\n                        } else if (\r\n                            (\r\n                                map.damonInlineArrays == undefined\r\n                                || map.damonInlineArrays.indexOf(i) === -1\r\n                            ) && map[i].length\r\n                        ) {\r\n                            line -= 1;\r\n                            _incrementLineUntilReaching(map[i], targetPath, currentPath.concat([i]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n", "(function () {\r\n    window.Damon = require('./Damon.js');\r\n})();\r\n"],
  "mappings": "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CA,YACA,WACA,QACA,YACA,MACA,aACA,OACA,WACA,OACA,UACA,OACA,OACA,MACA,MACA,WACA,MACA,YACA,cACA,UACA,QACA,UACA,QACA,MACA,MACA,MACA,MACA,MACA,MACA,QACA,UACA,UACA,MACA,QACA,KACA,OACA,SACA,OACA,OACA,SACA,UACA,MACA,QACA,OACA,QACA,WACA,QACA,YACA,SACA,OACA,QACA,MACA,YACA,UACA,UACA,KACA,WACA,OACA,YACA,KACA,MACA,MACA,QACA,KACA,QACA,WACA,UACA,UACA,SACA,UACA,UACA,QACA,UACA,UACA,SACA,OACA,WACA,OACA,SACA,SACA,MACA,YACA,YACA,SACA,MACA,SACA,QACA,MACA,SACA,MACA,KACA,MACA,OACA,SACA,KAAK,CACN;AAGM,cAAMyE,QAAMzE,OAAO,CACxB,OACA,KACA,YACA,eACA,gBACA,gBACA,iBACA,oBACA,UACA,YACA,QACA,QACA,WACA,UACA,QACA,KACA,SACA,YACA,SACA,SACA,QACA,kBACA,UACA,QACA,YACA,SACA,QACA,WACA,WACA,YACA,kBACA,QACA,QACA,SACA,UACA,UACA,QACA,YACA,SACA,QACA,SACA,QACA,OAAO,CACR;AAEM,cAAM0E,aAAa1E,OAAO,CAC/B,WACA,iBACA,uBACA,eACA,oBACA,qBACA,qBACA,kBACA,gBACA,WACA,WACA,WACA,WACA,WACA,kBACA,WACA,WACA,eACA,gBACA,YACA,gBACA,sBACA,eACA,UACA,cAAc,CACf;AAMM,cAAM2E,gBAAgB3E,OAAO,CAClC,WACA,iBACA,UACA,WACA,aACA,oBACA,kBACA,iBACA,iBACA,iBACA,SACA,aACA,QACA,gBACA,aACA,WACA,iBACA,UACA,OACA,cACA,WACA,KAAK,CACN;AAEM,cAAM4E,WAAS5E,OAAO,CAC3B,QACA,YACA,UACA,WACA,SACA,UACA,MACA,cACA,iBACA,MACA,MACA,SACA,WACA,YACA,SACA,QACA,MACA,UACA,SACA,UACA,QACA,QACA,WACA,UACA,OACA,SACA,OACA,UACA,cACA,aAAa,CACd;AAIM,cAAM6E,mBAAmB7E,OAAO,CACrC,WACA,eACA,cACA,YACA,aACA,WACA,WACA,UACA,UACA,SACA,aACA,cACA,kBACA,eACA,MAAM,CACP;AAEM,cAAM8E,OAAO9E,OAAO,CAAC,OAAO,CAAC;ACrR7B,cAAMwE,OAAOxE,OAAO,CACzB,UACA,UACA,SACA,OACA,kBACA,gBACA,wBACA,YACA,cACA,WACA,UACA,WACA,eACA,eACA,WACA,QACA,SACA,SACA,SACA,QACA,WACA,YACA,gBACA,UACA,eACA,YACA,YACA,WACA,OACA,YACA,2BACA,yBACA,YACA,aACA,WACA,gBACA,QACA,OACA,WACA,UACA,UACA,QACA,QACA,YACA,MACA,aACA,aACA,SACA,QACA,SACA,QACA,QACA,WACA,QACA,OACA,OACA,aACA,SACA,UACA,OACA,aACA,YACA,SACA,QACA,SACA,WACA,cACA,UACA,QACA,WACA,WACA,eACA,eACA,UACA,WACA,WACA,cACA,YACA,OACA,YACA,OACA,YACA,QACA,QACA,WACA,cACA,SACA,YACA,SACA,QACA,SACA,QACA,WACA,SACA,OACA,UACA,QACA,SACA,WACA,YACA,SACA,aACA,QACA,UACA,UACA,SACA,SACA,SACA,MAAM,CACP;AAEM,cAAMyE,MAAMzE,OAAO,CACxB,iBACA,cACA,YACA,sBACA,UACA,iBACA,iBACA,WACA,iBACA,kBACA,SACA,QACA,MACA,SACA,QACA,iBACA,aACA,aACA,SACA,uBACA,+BACA,iBACA,mBACA,MACA,MACA,KACA,MACA,MACA,mBACA,aACA,WACA,WACA,OACA,YACA,aACA,OACA,QACA,gBACA,aACA,UACA,eACA,eACA,iBACA,eACA,aACA,oBACA,gBACA,cACA,gBACA,eACA,MACA,MACA,MACA,MACA,cACA,YACA,iBACA,qBACA,UACA,QACA,MACA,mBACA,MACA,OACA,KACA,MACA,MACA,MACA,MACA,WACA,aACA,cACA,YACA,QACA,gBACA,kBACA,gBACA,oBACA,kBACA,SACA,cACA,cACA,gBACA,gBACA,eACA,eACA,oBACA,aACA,OACA,QACA,SACA,UACA,QACA,OACA,QACA,cACA,UACA,YACA,WACA,SACA,UACA,eACA,UACA,YACA,eACA,QACA,cACA,uBACA,oBACA,gBACA,UACA,iBACA,uBACA,kBACA,KACA,MACA,MACA,UACA,QACA,QACA,eACA,aACA,WACA,UACA,UACA,SACA,QACA,mBACA,oBACA,oBACA,gBACA,eACA,gBACA,eACA,cACA,gBACA,oBACA,qBACA,kBACA,mBACA,qBACA,kBACA,UACA,gBACA,SACA,gBACA,kBACA,YACA,WACA,WACA,aACA,oBACA,eACA,mBACA,kBACA,cACA,QACA,MACA,MACA,WACA,UACA,WACA,cACA,WACA,cACA,iBACA,iBACA,SACA,gBACA,QACA,gBACA,oBACA,oBACA,KACA,MACA,MACA,SACA,KACA,MACA,MACA,KACA,YAAY,CACb;AAEM,cAAM4E,SAAS5E,OAAO,CAC3B,UACA,eACA,SACA,YACA,SACA,gBACA,eACA,cACA,cACA,SACA,OACA,WACA,gBACA,YACA,SACA,SACA,UACA,QACA,MACA,WACA,UACA,iBACA,UACA,UACA,kBACA,aACA,YACA,eACA,WACA,WACA,iBACA,YACA,YACA,QACA,YACA,YACA,cACA,WACA,UACA,UACA,eACA,iBACA,wBACA,aACA,aACA,cACA,YACA,kBACA,kBACA,aACA,WACA,SACA,OAAO,CACR;AAEM,cAAM+E,MAAM/E,OAAO,CACxB,cACA,UACA,eACA,aACA,aAAa,CACd;ACtWM,cAAMgF,gBAAgB/E,KAAK,2BAA2B;AACtD,cAAMgF,WAAWhF,KAAK,uBAAuB;AAC7C,cAAMiF,cAAcjF,KAAK,eAAe;AACxC,cAAMkF,YAAYlF,KAAK,4BAA4B;AACnD,cAAMmF,YAAYnF,KAAK,gBAAgB;AACvC,cAAMoF,iBAAiBpF;UAC5B;;QACF;AACO,cAAMqF,oBAAoBrF,KAAK,uBAAuB;AACtD,cAAMsF,k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",
  "names": ["v", "d", "b", "__assign", "clarinet", "err", "entries", "setPrototypeOf", "isFrozen", "getPrototypeOf", "getOwnPropertyDescriptor", "Object", "freeze", "seal", "create", "apply", "construct", "Reflect", "x", "fun", "thisValue", "args", "Func", "arrayForEach", "unapply", "Array", "prototype", "forEach", "arrayPop", "pop", "arrayPush", "push", "stringToLowerCase", "String", "toLowerCase", "stringToString", "toString", "stringMatch", "match", "stringReplace", "replace", "stringIndexOf", "indexOf", "stringTrim", "trim", "objectHasOwnProperty", "hasOwnProperty", "regExpTest", "RegExp", "test", "typeErrorCreate", "unconstruct", "TypeError", "func", "thisArg", "_len", "arguments", "length", "_key", "_len2", "_key2", "addToSet", "set", "array", "transformCaseFunc", "undefined", "l", "element", "lcElement", "cleanArray", "index", "isPropertyExist", "clone", "object", "newObject", "property", "value", "isArray", "constructor", "lookupGetter", "prop", "desc", "get", "fallbackValue", "html", "svg", "svgFilters", "svgDisallowed", "mathMl", "mathMlDisallowed", "text", "xml", "MUSTACHE_EXPR", "ERB_EXPR", "TMPLIT_EXPR", "DATA_ATTR", "ARIA_ATTR", "IS_ALLOWED_URI", "IS_SCRIPT_OR_DATA", "ATTR_WHITESPACE", "DOCTYPE_NAME", "CUSTOM_ELEMENT", "getGlobal", "window", "_createTrustedTypesPolicy", "trustedTypes", "purifyHostElement", "createPolicy", "suffix", "ATTR_NAME", "hasAttribute", "getAttribute", "policyName", "createHTML", "createScriptURL", "scriptUrl", "_", "console", "warn", "createDOMPurify", "DOMPurify", "root", "version", "VERSION", "removed", "document", "nodeType", "isSupported", "originalDocument", "currentScript", "DocumentFragment", "HTMLTemplateElement", "Node", "Element", "NodeFilter", "NamedNodeMap", "MozNamedAttrMap", "HTMLFormElement", "DOMParser", "ElementPrototype", "cloneNode", "getNextSibling", "getChildNodes", "getParentNode", "template", "createElement", "content", "ownerDocument", "trustedTypesPolicy", "emptyHTML", "implementation", "createNodeIterator", "createDocumentFragment", "getElementsByTagName", "importNode", "hooks", "createHTMLDocument", "EXPRESSIONS", "ALLOWED_TAGS", "DEFAULT_ALLOWED_TAGS", "TAGS", "ALLOWED_ATTR", "DEFAULT_ALLOWED_ATTR", "ATTRS", "CUSTOM_ELEMENT_HANDLING", "tagNameCheck", "writable", "configurable", "enumerable", "attributeNameCheck", "allowCustomizedBuiltInElements", "FORBID_TAGS", "FORBID_ATTR", "ALLOW_ARIA_ATTR", "ALLOW_DATA_ATTR", "ALLOW_UNKNOWN_PROTOCOLS", "ALLOW_SELF_CLOSE_IN_ATTR", "SAFE_FOR_TEMPLATES", "WHOLE_DOCUMENT", "SET_CONFIG", "FORCE_BODY", "RETURN_DOM", "RETURN_DOM_FRAGMENT", "RETURN_TRUSTED_TYPE", "SANITIZE_DOM", "SANITIZE_NAMED_PROPS", "SANITIZE_NAMED_PROPS_PREFIX", "KEEP_CONTENT", "IN_PLACE", "USE_PROFILES", "FORBID_CONTENTS", "DEFAULT_FORBID_CONTENTS", "DATA_URI_TAGS", "DEFAULT_DATA_URI_TAGS", "URI_SAFE_ATTRIBUTES", "DEFAULT_URI_SAFE_ATTRIBUTES", "MATHML_NAMESPACE", "SVG_NAMESPACE", "HTML_NAMESPACE", "NAMESPACE", "IS_EMPTY_INPUT", "ALLOWED_NAMESPACES", "DEFAULT_ALLOWED_NAMESPACES", "PARSER_MEDIA_TYPE", "SUPPORTED_PARSER_MEDIA_TYPES", "DEFAULT_PARSER_MEDIA_TYPE", "CONFIG", "formElement", "isRegexOrFunction", "testValue", "Function", "_parseConfig", "cfg", "ADD_URI_SAFE_ATTR", "ADD_DATA_URI_TAGS", "ALLOWED_URI_REGEXP", "ADD_TAGS", "ADD_ATTR", "table", "tbody", "TRUSTED_TYPES_POLICY", "MATHML_TEXT_INTEGRATION_POINTS", "HTML_INTEGRATION_POINTS", "COMMON_SVG_AND_HTML_ELEMENTS", "ALL_SVG_TAGS", "ALL_MATHML_TAGS", "_checkValidNamespace", "parent", "tagName", "namespaceURI", "parentTagName", "Boolean", "_forceRemove", "node", "parentNode", "removeChild", "remove", "_removeAttribute", "name", "attribute", "getAttributeNode", "from", "removeAttribute", "setAttribute", "_initDocument", "dirty", "doc", "leadingWhitespace", "matches", "dirtyPayload", "parseFromString", "documentElement", "createDocument", "innerHTML", "body", "insertBefore", "createTextNode", "childNodes", "call", "_createNodeIterator", "SHOW_ELEMENT", "SHOW_COMMENT", "SHOW_TEXT", "SHOW_PROCESSING_INSTRUCTION", "SHOW_CDATA_SECTION", "_isClobbered", "elm", "nodeName", "textContent", "attributes", "hasChildNodes", "_isNode", "_executeHook", "entryPoint", "currentNode", "data", "hook", "_sanitizeElements", "allowedTags", "firstElementChild", "_isBasicCustomElement", "childCount", "i", "expr", "_isValidAttribute", "lcTag", "lcName", "_sanitizeAttributes", "hookEvent", "attrName", "attrValue", "keepAttr", "allowedAttributes", "attr", "forceKeepAttr", "getAttributeType", "setAttributeNS", "_sanitizeShadowDOM", "fragment", "shadowNode", "shadowIterator", "nextNode", "sanitize", "importedNode", "returnNode", "appendChild", "firstChild", "nodeIterator", "shadowroot", "shadowrootmode", "serializedHTML", "outerHTML", "doctype", "setConfig", "clearConfig", "isValidAttribute", "tag", "addHook", "hookFunction", "removeHook", "removeHooks", "removeAllHooks", "jsonMap", "dataCell", "list", "nullsCounter", "tree", "jsonMap", "i", "nullsCounter", "match"]
}
